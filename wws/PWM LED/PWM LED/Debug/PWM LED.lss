
PWM LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000332  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000099  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027a  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000009f  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>


int main(void)
{
	DDRA=0;
  92:	1a ba       	out	0x1a, r1	; 26
	DDRB=255;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	PORTB=(1<<PB3);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	88 bb       	out	0x18, r24	; 24
	int a;
	
	ADMUX|=(1<<REFS0);     //internally shorting AREF and AVCC//analog signal taken on pin0//
  9c:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);  //enabling ADC and setting division factor//
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	87 68       	ori	r24, 0x87	; 135
  a2:	86 b9       	out	0x06, r24	; 6
	TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS00);     //setting on fast PWM mode and no prescaling//
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	89 66       	ori	r24, 0x69	; 105
  a8:	83 bf       	out	0x33, r24	; 51
		}
		
		else if(a>818) //else between 4-5 volts//
		{
		//TCNT0=0;
		OCR0=254;
  aa:	fe ef       	ldi	r31, 0xFE	; 254
		OCR0=128;			
		}			
		else if((a>613)&&(a<=818))    //analog voltage between 3 to 4 volts// 
		{
		//TCNT0=0;
		OCR0=192;
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
		//TCNT0=0;
		OCR0=64;
		}
		else if((a>410)&&(a<=613)){        //analog voltage between 2 to 3 volts//
		//TCNT0=0;
		OCR0=128;			
  ae:	70 e8       	ldi	r23, 0x80	; 128
		a=ADC;
		
		if (a<=409)                  //for analog voltage less than 2volts// 
		{
		//TCNT0=0;
		OCR0=64;
  b0:	60 e4       	ldi	r22, 0x40	; 64
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);  //enabling ADC and setting division factor//
	TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS00);     //setting on fast PWM mode and no prescaling//
	
    while(1)
    {
		ADCSRA|=(1<<ADSC);
  b2:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1<<ADSC)) !=0);
  b4:	36 99       	sbic	0x06, 6	; 6
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x22>
		 
		a=ADC;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	9c 01       	movw	r18, r24
		
		if (a<=409)                  //for analog voltage less than 2volts// 
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	8a 39       	cpi	r24, 0x9A	; 154
  c2:	94 07       	cpc	r25, r20
  c4:	14 f4       	brge	.+4      	; 0xca <main+0x38>
		{
		//TCNT0=0;
		OCR0=64;
  c6:	6c bf       	out	0x3c, r22	; 60
  c8:	f4 cf       	rjmp	.-24     	; 0xb2 <main+0x20>
		}
		else if((a>410)&&(a<=613)){        //analog voltage between 2 to 3 volts//
  ca:	ac 01       	movw	r20, r24
  cc:	4b 59       	subi	r20, 0x9B	; 155
  ce:	51 40       	sbci	r21, 0x01	; 1
  d0:	4b 3c       	cpi	r20, 0xCB	; 203
  d2:	51 05       	cpc	r21, r1
  d4:	10 f4       	brcc	.+4      	; 0xda <main+0x48>
		//TCNT0=0;
		OCR0=128;			
  d6:	7c bf       	out	0x3c, r23	; 60
  d8:	ec cf       	rjmp	.-40     	; 0xb2 <main+0x20>
		}			
		else if((a>613)&&(a<=818))    //analog voltage between 3 to 4 volts// 
  da:	86 56       	subi	r24, 0x66	; 102
  dc:	92 40       	sbci	r25, 0x02	; 2
  de:	8d 3c       	cpi	r24, 0xCD	; 205
  e0:	91 05       	cpc	r25, r1
  e2:	10 f4       	brcc	.+4      	; 0xe8 <main+0x56>
		{
		//TCNT0=0;
		OCR0=192;
  e4:	ec bf       	out	0x3c, r30	; 60
  e6:	e5 cf       	rjmp	.-54     	; 0xb2 <main+0x20>
		}
		
		else if(a>818) //else between 4-5 volts//
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	23 33       	cpi	r18, 0x33	; 51
  ec:	38 07       	cpc	r19, r24
  ee:	0c f3       	brlt	.-62     	; 0xb2 <main+0x20>
		{
		//TCNT0=0;
		OCR0=254;
  f0:	fc bf       	out	0x3c, r31	; 60
  f2:	df cf       	rjmp	.-66     	; 0xb2 <main+0x20>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
