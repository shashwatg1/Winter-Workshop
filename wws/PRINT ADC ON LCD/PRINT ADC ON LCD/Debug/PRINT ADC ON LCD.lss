
PRINT ADC ON LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000858  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000858  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b26  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002aa  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000334  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002c0  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000007fb  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  000026eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  7a:	0c 94 2a 04 	jmp	0x854	; 0x854 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
}


void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd&(0xF0);
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	98 bb       	out	0x18, r25	; 24
	Control_PORT &= ~(1<<RS);
  88:	c0 98       	cbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  8a:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  8c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e9       	ldi	r30, 0x9F	; 159
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_cmd+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_cmd+0x16>
  98:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  9a:	c2 98       	cbi	0x18, 2	; 24
  9c:	ef e9       	ldi	r30, 0x9F	; 159
  9e:	ff e0       	ldi	r31, 0x0F	; 15
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_cmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_cmd+0x24>
  a6:	00 00       	nop
	_delay_ms(1);
	LCD_DATA=(cmd<<4)&(0xF0);
  a8:	f0 e1       	ldi	r31, 0x10	; 16
  aa:	8f 9f       	mul	r24, r31
  ac:	c0 01       	movw	r24, r0
  ae:	11 24       	eor	r1, r1
  b0:	88 bb       	out	0x18, r24	; 24
	Control_PORT &= ~(1<<RS);
  b2:	c0 98       	cbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  b4:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  b6:	c2 9a       	sbi	0x18, 2	; 24
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_cmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_cmd+0x40>
  c2:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	ef e9       	ldi	r30, 0x9F	; 159
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_cmd+0x48>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_cmd+0x4e>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <LCD_write>:
	return;
}

void LCD_write(unsigned char data)
{
	LCD_DATA= data&(0xF0);
  d4:	98 2f       	mov	r25, r24
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	98 bb       	out	0x18, r25	; 24
	Control_PORT |= (1<<RS);
  da:	c0 9a       	sbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  dc:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  de:	c2 9a       	sbi	0x18, 2	; 24
  e0:	ef e9       	ldi	r30, 0x9F	; 159
  e2:	ff e0       	ldi	r31, 0x0F	; 15
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_write+0x10>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_write+0x16>
  ea:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  ec:	c2 98       	cbi	0x18, 2	; 24
  ee:	ef e9       	ldi	r30, 0x9F	; 159
  f0:	ff e0       	ldi	r31, 0x0F	; 15
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_write+0x1e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_write+0x24>
  f8:	00 00       	nop
	_delay_ms(1);	// EN and RW as LOW and RS HIGH
	
	LCD_DATA= (data<<4)&(0xF0);
  fa:	f0 e1       	ldi	r31, 0x10	; 16
  fc:	8f 9f       	mul	r24, r31
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	88 bb       	out	0x18, r24	; 24
	Control_PORT |= (1<<RS);
 104:	c0 9a       	sbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
 106:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
 108:	c2 9a       	sbi	0x18, 2	; 24
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_write+0x3a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_write+0x40>
 114:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);
 116:	c2 98       	cbi	0x18, 2	; 24
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_write+0x48>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_write+0x4e>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <clear_display>:

// The functions after this comment are the different commands for LCD

void clear_display() // Clears display and returns cursor to the home position (address 0)
{
	LCD_cmd(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 12c:	08 95       	ret

0000012e <init_LCD>:
	    1 *    2    5x 7 dots  1/16  Cannot display 2 lines with 5x10 dot character font
	*/
	// when N = 1 then two lines of display
	// when N = 0
	unsigned char func = (1<<5) | (DL<<4) | (N<<3) | (F<<2);
	LCD_cmd(func);
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>

void init_LCD()
{
	function_set(0,1,0);//DL = 1 for 8-bit interface, N = 1 to set the fonts for 2 line display and if N = 1 then value of F doesn't matter	
	
	clear_display();
 134:	0e 94 93 00 	call	0x126	; 0x126 <clear_display>
	B is to set whether the cursor will blink or not
	0 - Blink off
	1 - Blink on
	*/
	unsigned char display = (1<<3) | (D<<2) | (C<<1) | (B); // formula to generate command byte
	LCD_cmd(display);
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	S is to decide Shift
	0 - No Display Shift
	1 - Display Shift
	*/
	unsigned char entry = (1<<2) | (1<<I_D) | (S); // formula to generate command byte
	LCD_cmd(entry);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 144:	08 95       	ret

00000146 <cursor_home>:
	LCD_cmd(0x01);
}

void cursor_home() // Returns cursor to home position (address 0). Also returns display being shifted to the original position. DDRAM contents remains unchanged.
{
	LCD_cmd(0x02);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 14c:	08 95       	ret

0000014e <print_string>:
	
	LCD_cmd(display_address);
}

void print_string(char word[])
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
	unsigned char i=0; // iterating variable
	unsigned char length = (unsigned char)strlen(word); // length of the word
 156:	fc 01       	movw	r30, r24
 158:	01 90       	ld	r0, Z+
 15a:	00 20       	and	r0, r0
 15c:	e9 f7       	brne	.-6      	; 0x158 <print_string+0xa>
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	1e 2f       	mov	r17, r30
 162:	18 1b       	sub	r17, r24
	
	// Printing the word
	for(i=0;i<length;i++)
 164:	51 f0       	breq	.+20     	; 0x17a <print_string+0x2c>
 166:	08 2f       	mov	r16, r24
 168:	c0 2f       	mov	r28, r16
 16a:	d9 2f       	mov	r29, r25
	{
	LCD_write(word[i]);
 16c:	89 91       	ld	r24, Y+
 16e:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_write>
 172:	8c 2f       	mov	r24, r28
 174:	80 1b       	sub	r24, r16
{
	unsigned char i=0; // iterating variable
	unsigned char length = (unsigned char)strlen(word); // length of the word
	
	// Printing the word
	for(i=0;i<length;i++)
 176:	81 17       	cp	r24, r17
 178:	c8 f3       	brcs	.-14     	; 0x16c <print_string+0x1e>
	{
	LCD_write(word[i]);
	//_delay_ms(1000);
	}	
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <print_integer>:

void print_integer(int number)// This function prints integer on LCD
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	2a 97       	sbiw	r28, 0x0a	; 10
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
	char num[10];
	sprintf(num,"%d",number); // function sprintf converts integer to string
 19c:	9f 93       	push	r25
 19e:	8f 93       	push	r24
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	9f 93       	push	r25
 1a6:	8f 93       	push	r24
 1a8:	8e 01       	movw	r16, r28
 1aa:	0f 5f       	subi	r16, 0xFF	; 255
 1ac:	1f 4f       	sbci	r17, 0xFF	; 255
 1ae:	1f 93       	push	r17
 1b0:	0f 93       	push	r16
 1b2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sprintf>
	
	print_string(num);
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 a7 00 	call	0x14e	; 0x14e <print_string>
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
}
 1c8:	2a 96       	adiw	r28, 0x0a	; 10
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <main>:
{
	OCR1B = a;
}
int main(void)
{
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
 1de:	81 ea       	ldi	r24, 0xA1	; 161
 1e0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<CS00)|(1<<CS02);
 1e2:	8d e0       	ldi	r24, 0x0D	; 13
 1e4:	8e bd       	out	0x2e, r24	; 46
	DDRD = setit1;
 1e6:	11 ba       	out	0x11, r1	; 17
	DDRC = setit;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	84 bb       	out	0x14, r24	; 20
	DDRB = setit;
 1ec:	87 bb       	out	0x17, r24	; 23
	DDRA = setit1;
 1ee:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 1f0:	87 e8       	ldi	r24, 0x87	; 135
 1f2:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS0);
 1f4:	80 e4       	ldi	r24, 0x40	; 64
 1f6:	87 b9       	out	0x07, r24	; 7
	
	init_LCD();
 1f8:	0e 94 97 00 	call	0x12e	; 0x12e <init_LCD>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	80 e7       	ldi	r24, 0x70	; 112
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x24>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x2e>
 20c:	00 00       	nop
			speed_motor1(a);
			speed_motor2(a);
		}
		else 
		{
			PORTC = BACKWARD;
 20e:	0f 2e       	mov	r0, r31
 210:	f4 e2       	ldi	r31, 0x24	; 36
 212:	ef 2e       	mov	r14, r31
 214:	f0 2d       	mov	r31, r0
#define FORWARD (1<<PC3)|(1<<PC4)
#define BACKWARD (1<<PC2)|(1<<PC5)
int mapit (int var, int low, int high, int OMI, int OMA)
{
	int scale = (OMA-OMI)/(high - low);
	int ans = OMI +scale*(var-low);
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	10 e0       	ldi	r17, 0x00	; 0
		{
			continue;
		}
		else if (b>388)
		{
			PORTC = FORWARD;
 21a:	0f 2e       	mov	r0, r31
 21c:	f8 e1       	ldi	r31, 0x18	; 24
 21e:	ff 2e       	mov	r15, r31
 220:	f0 2d       	mov	r31, r0
	init_LCD();
	_delay_ms(50);
	while(1)
	{
		//TODO:: Please write your application code
		clear_display();
 222:	0e 94 93 00 	call	0x126	; 0x126 <clear_display>
		cursor_home();
 226:	0e 94 a3 00 	call	0x146	; 0x146 <cursor_home>
		int a;
		ADCSRA|=(1<<ADSC);
 22a:	36 9a       	sbi	0x06, 6	; 6
		//print_integer(a);
		//_delay_ms(20);
		ADMUX|=(1<<MUX0);
 22c:	38 9a       	sbi	0x07, 0	; 7
		//print_string("  ");
		ADCSRA|=(1<<ADSC);
 22e:	36 9a       	sbi	0x06, 6	; 6
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	89 ef       	ldi	r24, 0xF9	; 249
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x58>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x62>
 240:	00 00       	nop
		_delay_ms(20);
		int b = ADC;
 242:	c4 b1       	in	r28, 0x04	; 4
 244:	d5 b1       	in	r29, 0x05	; 5
		print_integer(b);
 246:	ce 01       	movw	r24, r28
 248:	0e 94 c2 00 	call	0x184	; 0x184 <print_integer>
		//_delay_ms(100);
		if (b>=324&&b<=328)
 24c:	ce 01       	movw	r24, r28
 24e:	84 54       	subi	r24, 0x44	; 68
 250:	91 40       	sbci	r25, 0x01	; 1
 252:	05 97       	sbiw	r24, 0x05	; 5
 254:	30 f3       	brcs	.-52     	; 0x222 <main+0x44>
		{
			continue;
		}
		else if (b>388)
 256:	c5 38       	cpi	r28, 0x85	; 133
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	d2 07       	cpc	r29, r18
 25c:	74 f0       	brlt	.+28     	; 0x27a <main+0x9c>
		{
			PORTC = FORWARD;
 25e:	f5 ba       	out	0x15, r15	; 21
#define FORWARD (1<<PC3)|(1<<PC4)
#define BACKWARD (1<<PC2)|(1<<PC5)
int mapit (int var, int low, int high, int OMI, int OMA)
{
	int scale = (OMA-OMI)/(high - low);
	int ans = OMI +scale*(var-low);
 260:	cc 0f       	add	r28, r28
 262:	dd 1f       	adc	r29, r29
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	cc 0f       	add	r28, r28
 26a:	dd 1f       	adc	r29, r29
 26c:	cc 5d       	subi	r28, 0xDC	; 220
 26e:	d9 40       	sbci	r29, 0x09	; 9
	return ans;
}
void speed_motor1(int a)
{
	OCR1A = a;
 270:	db bd       	out	0x2b, r29	; 43
 272:	ca bd       	out	0x2a, r28	; 42
}
void speed_motor2(int a)
{
	OCR1B = a;
 274:	d9 bd       	out	0x29, r29	; 41
 276:	c8 bd       	out	0x28, r28	; 40
 278:	12 c0       	rjmp	.+36     	; 0x29e <main+0xc0>
			speed_motor1(a);
			speed_motor2(a);
		}
		else 
		{
			PORTC = BACKWARD;
 27a:	e5 ba       	out	0x15, r14	; 21
#define FORWARD (1<<PC3)|(1<<PC4)
#define BACKWARD (1<<PC2)|(1<<PC5)
int mapit (int var, int low, int high, int OMI, int OMA)
{
	int scale = (OMA-OMI)/(high - low);
	int ans = OMI +scale*(var-low);
 27c:	c2 53       	subi	r28, 0x32	; 50
 27e:	d1 40       	sbci	r29, 0x01	; 1
 280:	c8 01       	movw	r24, r16
 282:	8c 1b       	sub	r24, r28
 284:	9d 0b       	sbc	r25, r29
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	81 50       	subi	r24, 0x01	; 1
 294:	9f 4f       	sbci	r25, 0xFF	; 255
	return ans;
}
void speed_motor1(int a)
{
	OCR1A = a;
 296:	9b bd       	out	0x2b, r25	; 43
 298:	8a bd       	out	0x2a, r24	; 42
}
void speed_motor2(int a)
{
	OCR1B = a;
 29a:	99 bd       	out	0x29, r25	; 41
 29c:	88 bd       	out	0x28, r24	; 40
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	91 ee       	ldi	r25, 0xE1	; 225
 2a2:	24 e0       	ldi	r18, 0x04	; 4
 2a4:	81 50       	subi	r24, 0x01	; 1
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	20 40       	sbci	r18, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0xc6>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0xd0>
 2ae:	00 00       	nop
 2b0:	b8 cf       	rjmp	.-144    	; 0x222 <main+0x44>

000002b2 <sprintf>:
 2b2:	ae e0       	ldi	r26, 0x0E	; 14
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	ef e5       	ldi	r30, 0x5F	; 95
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	0c 94 01 04 	jmp	0x802	; 0x802 <__prologue_saves__+0x1c>
 2be:	0d 89       	ldd	r16, Y+21	; 0x15
 2c0:	1e 89       	ldd	r17, Y+22	; 0x16
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	8c 83       	std	Y+4, r24	; 0x04
 2c6:	1a 83       	std	Y+2, r17	; 0x02
 2c8:	09 83       	std	Y+1, r16	; 0x01
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f e7       	ldi	r25, 0x7F	; 127
 2ce:	9e 83       	std	Y+6, r25	; 0x06
 2d0:	8d 83       	std	Y+5, r24	; 0x05
 2d2:	ae 01       	movw	r20, r28
 2d4:	47 5e       	subi	r20, 0xE7	; 231
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	6f 89       	ldd	r22, Y+23	; 0x17
 2da:	78 8d       	ldd	r23, Y+24	; 0x18
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vfprintf>
 2e4:	ef 81       	ldd	r30, Y+7	; 0x07
 2e6:	f8 85       	ldd	r31, Y+8	; 0x08
 2e8:	e0 0f       	add	r30, r16
 2ea:	f1 1f       	adc	r31, r17
 2ec:	10 82       	st	Z, r1
 2ee:	2e 96       	adiw	r28, 0x0e	; 14
 2f0:	e4 e0       	ldi	r30, 0x04	; 4
 2f2:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__epilogue_restores__+0x1c>

000002f6 <vfprintf>:
 2f6:	ac e0       	ldi	r26, 0x0C	; 12
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	e1 e8       	ldi	r30, 0x81	; 129
 2fc:	f1 e0       	ldi	r31, 0x01	; 1
 2fe:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__prologue_saves__>
 302:	7c 01       	movw	r14, r24
 304:	6b 01       	movw	r12, r22
 306:	8a 01       	movw	r16, r20
 308:	fc 01       	movw	r30, r24
 30a:	17 82       	std	Z+7, r1	; 0x07
 30c:	16 82       	std	Z+6, r1	; 0x06
 30e:	83 81       	ldd	r24, Z+3	; 0x03
 310:	81 ff       	sbrs	r24, 1
 312:	bd c1       	rjmp	.+890    	; 0x68e <__stack+0x22f>
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	4c 01       	movw	r8, r24
 31a:	f7 01       	movw	r30, r14
 31c:	93 81       	ldd	r25, Z+3	; 0x03
 31e:	f6 01       	movw	r30, r12
 320:	93 fd       	sbrc	r25, 3
 322:	85 91       	lpm	r24, Z+
 324:	93 ff       	sbrs	r25, 3
 326:	81 91       	ld	r24, Z+
 328:	6f 01       	movw	r12, r30
 32a:	88 23       	and	r24, r24
 32c:	09 f4       	brne	.+2      	; 0x330 <vfprintf+0x3a>
 32e:	ab c1       	rjmp	.+854    	; 0x686 <__stack+0x227>
 330:	85 32       	cpi	r24, 0x25	; 37
 332:	39 f4       	brne	.+14     	; 0x342 <vfprintf+0x4c>
 334:	93 fd       	sbrc	r25, 3
 336:	85 91       	lpm	r24, Z+
 338:	93 ff       	sbrs	r25, 3
 33a:	81 91       	ld	r24, Z+
 33c:	6f 01       	movw	r12, r30
 33e:	85 32       	cpi	r24, 0x25	; 37
 340:	29 f4       	brne	.+10     	; 0x34c <vfprintf+0x56>
 342:	b7 01       	movw	r22, r14
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 34a:	e7 cf       	rjmp	.-50     	; 0x31a <vfprintf+0x24>
 34c:	51 2c       	mov	r5, r1
 34e:	31 2c       	mov	r3, r1
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	20 32       	cpi	r18, 0x20	; 32
 354:	a0 f4       	brcc	.+40     	; 0x37e <vfprintf+0x88>
 356:	8b 32       	cpi	r24, 0x2B	; 43
 358:	69 f0       	breq	.+26     	; 0x374 <vfprintf+0x7e>
 35a:	30 f4       	brcc	.+12     	; 0x368 <vfprintf+0x72>
 35c:	80 32       	cpi	r24, 0x20	; 32
 35e:	59 f0       	breq	.+22     	; 0x376 <vfprintf+0x80>
 360:	83 32       	cpi	r24, 0x23	; 35
 362:	69 f4       	brne	.+26     	; 0x37e <vfprintf+0x88>
 364:	20 61       	ori	r18, 0x10	; 16
 366:	2c c0       	rjmp	.+88     	; 0x3c0 <vfprintf+0xca>
 368:	8d 32       	cpi	r24, 0x2D	; 45
 36a:	39 f0       	breq	.+14     	; 0x37a <vfprintf+0x84>
 36c:	80 33       	cpi	r24, 0x30	; 48
 36e:	39 f4       	brne	.+14     	; 0x37e <vfprintf+0x88>
 370:	21 60       	ori	r18, 0x01	; 1
 372:	26 c0       	rjmp	.+76     	; 0x3c0 <vfprintf+0xca>
 374:	22 60       	ori	r18, 0x02	; 2
 376:	24 60       	ori	r18, 0x04	; 4
 378:	23 c0       	rjmp	.+70     	; 0x3c0 <vfprintf+0xca>
 37a:	28 60       	ori	r18, 0x08	; 8
 37c:	21 c0       	rjmp	.+66     	; 0x3c0 <vfprintf+0xca>
 37e:	27 fd       	sbrc	r18, 7
 380:	27 c0       	rjmp	.+78     	; 0x3d0 <vfprintf+0xda>
 382:	30 ed       	ldi	r19, 0xD0	; 208
 384:	38 0f       	add	r19, r24
 386:	3a 30       	cpi	r19, 0x0A	; 10
 388:	78 f4       	brcc	.+30     	; 0x3a8 <vfprintf+0xb2>
 38a:	26 ff       	sbrs	r18, 6
 38c:	06 c0       	rjmp	.+12     	; 0x39a <vfprintf+0xa4>
 38e:	fa e0       	ldi	r31, 0x0A	; 10
 390:	5f 9e       	mul	r5, r31
 392:	30 0d       	add	r19, r0
 394:	11 24       	eor	r1, r1
 396:	53 2e       	mov	r5, r19
 398:	13 c0       	rjmp	.+38     	; 0x3c0 <vfprintf+0xca>
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	38 9e       	mul	r3, r24
 39e:	30 0d       	add	r19, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	33 2e       	mov	r3, r19
 3a4:	20 62       	ori	r18, 0x20	; 32
 3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <vfprintf+0xca>
 3a8:	8e 32       	cpi	r24, 0x2E	; 46
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <vfprintf+0xbe>
 3ac:	26 fd       	sbrc	r18, 6
 3ae:	6b c1       	rjmp	.+726    	; 0x686 <__stack+0x227>
 3b0:	20 64       	ori	r18, 0x40	; 64
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <vfprintf+0xca>
 3b4:	8c 36       	cpi	r24, 0x6C	; 108
 3b6:	11 f4       	brne	.+4      	; 0x3bc <vfprintf+0xc6>
 3b8:	20 68       	ori	r18, 0x80	; 128
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <vfprintf+0xca>
 3bc:	88 36       	cpi	r24, 0x68	; 104
 3be:	41 f4       	brne	.+16     	; 0x3d0 <vfprintf+0xda>
 3c0:	f6 01       	movw	r30, r12
 3c2:	93 fd       	sbrc	r25, 3
 3c4:	85 91       	lpm	r24, Z+
 3c6:	93 ff       	sbrs	r25, 3
 3c8:	81 91       	ld	r24, Z+
 3ca:	6f 01       	movw	r12, r30
 3cc:	81 11       	cpse	r24, r1
 3ce:	c1 cf       	rjmp	.-126    	; 0x352 <vfprintf+0x5c>
 3d0:	98 2f       	mov	r25, r24
 3d2:	9f 7d       	andi	r25, 0xDF	; 223
 3d4:	95 54       	subi	r25, 0x45	; 69
 3d6:	93 30       	cpi	r25, 0x03	; 3
 3d8:	28 f4       	brcc	.+10     	; 0x3e4 <vfprintf+0xee>
 3da:	0c 5f       	subi	r16, 0xFC	; 252
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
 3de:	ff e3       	ldi	r31, 0x3F	; 63
 3e0:	f9 83       	std	Y+1, r31	; 0x01
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <vfprintf+0x108>
 3e4:	83 36       	cpi	r24, 0x63	; 99
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <vfprintf+0xfe>
 3e8:	83 37       	cpi	r24, 0x73	; 115
 3ea:	71 f0       	breq	.+28     	; 0x408 <vfprintf+0x112>
 3ec:	83 35       	cpi	r24, 0x53	; 83
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <vfprintf+0xfc>
 3f0:	5b c0       	rjmp	.+182    	; 0x4a8 <__stack+0x49>
 3f2:	22 c0       	rjmp	.+68     	; 0x438 <vfprintf+0x142>
 3f4:	f8 01       	movw	r30, r16
 3f6:	80 81       	ld	r24, Z
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	0e 5f       	subi	r16, 0xFE	; 254
 3fc:	1f 4f       	sbci	r17, 0xFF	; 255
 3fe:	44 24       	eor	r4, r4
 400:	43 94       	inc	r4
 402:	51 2c       	mov	r5, r1
 404:	54 01       	movw	r10, r8
 406:	15 c0       	rjmp	.+42     	; 0x432 <vfprintf+0x13c>
 408:	38 01       	movw	r6, r16
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	6f 0e       	add	r6, r31
 40e:	71 1c       	adc	r7, r1
 410:	f8 01       	movw	r30, r16
 412:	a0 80       	ld	r10, Z
 414:	b1 80       	ldd	r11, Z+1	; 0x01
 416:	26 ff       	sbrs	r18, 6
 418:	03 c0       	rjmp	.+6      	; 0x420 <vfprintf+0x12a>
 41a:	65 2d       	mov	r22, r5
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <vfprintf+0x12e>
 420:	6f ef       	ldi	r22, 0xFF	; 255
 422:	7f ef       	ldi	r23, 0xFF	; 255
 424:	c5 01       	movw	r24, r10
 426:	2c 87       	std	Y+12, r18	; 0x0c
 428:	0e 94 58 03 	call	0x6b0	; 0x6b0 <strnlen>
 42c:	2c 01       	movw	r4, r24
 42e:	83 01       	movw	r16, r6
 430:	2c 85       	ldd	r18, Y+12	; 0x0c
 432:	2f 77       	andi	r18, 0x7F	; 127
 434:	22 2e       	mov	r2, r18
 436:	17 c0       	rjmp	.+46     	; 0x466 <__stack+0x7>
 438:	38 01       	movw	r6, r16
 43a:	f2 e0       	ldi	r31, 0x02	; 2
 43c:	6f 0e       	add	r6, r31
 43e:	71 1c       	adc	r7, r1
 440:	f8 01       	movw	r30, r16
 442:	a0 80       	ld	r10, Z
 444:	b1 80       	ldd	r11, Z+1	; 0x01
 446:	26 ff       	sbrs	r18, 6
 448:	03 c0       	rjmp	.+6      	; 0x450 <vfprintf+0x15a>
 44a:	65 2d       	mov	r22, r5
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <vfprintf+0x15e>
 450:	6f ef       	ldi	r22, 0xFF	; 255
 452:	7f ef       	ldi	r23, 0xFF	; 255
 454:	c5 01       	movw	r24, r10
 456:	2c 87       	std	Y+12, r18	; 0x0c
 458:	0e 94 4d 03 	call	0x69a	; 0x69a <strnlen_P>
 45c:	2c 01       	movw	r4, r24
 45e:	2c 85       	ldd	r18, Y+12	; 0x0c
 460:	20 68       	ori	r18, 0x80	; 128
 462:	22 2e       	mov	r2, r18
 464:	83 01       	movw	r16, r6
 466:	23 fc       	sbrc	r2, 3
 468:	1b c0       	rjmp	.+54     	; 0x4a0 <__stack+0x41>
 46a:	83 2d       	mov	r24, r3
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	48 16       	cp	r4, r24
 470:	59 06       	cpc	r5, r25
 472:	b0 f4       	brcc	.+44     	; 0x4a0 <__stack+0x41>
 474:	b7 01       	movw	r22, r14
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 47e:	3a 94       	dec	r3
 480:	f4 cf       	rjmp	.-24     	; 0x46a <__stack+0xb>
 482:	f5 01       	movw	r30, r10
 484:	27 fc       	sbrc	r2, 7
 486:	85 91       	lpm	r24, Z+
 488:	27 fe       	sbrs	r2, 7
 48a:	81 91       	ld	r24, Z+
 48c:	5f 01       	movw	r10, r30
 48e:	b7 01       	movw	r22, r14
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 496:	31 10       	cpse	r3, r1
 498:	3a 94       	dec	r3
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	4f 1a       	sub	r4, r31
 49e:	51 08       	sbc	r5, r1
 4a0:	41 14       	cp	r4, r1
 4a2:	51 04       	cpc	r5, r1
 4a4:	71 f7       	brne	.-36     	; 0x482 <__stack+0x23>
 4a6:	e5 c0       	rjmp	.+458    	; 0x672 <__stack+0x213>
 4a8:	84 36       	cpi	r24, 0x64	; 100
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <__stack+0x51>
 4ac:	89 36       	cpi	r24, 0x69	; 105
 4ae:	39 f5       	brne	.+78     	; 0x4fe <__stack+0x9f>
 4b0:	f8 01       	movw	r30, r16
 4b2:	27 ff       	sbrs	r18, 7
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__stack+0x65>
 4b6:	60 81       	ld	r22, Z
 4b8:	71 81       	ldd	r23, Z+1	; 0x01
 4ba:	82 81       	ldd	r24, Z+2	; 0x02
 4bc:	93 81       	ldd	r25, Z+3	; 0x03
 4be:	0c 5f       	subi	r16, 0xFC	; 252
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <__stack+0x75>
 4c4:	60 81       	ld	r22, Z
 4c6:	71 81       	ldd	r23, Z+1	; 0x01
 4c8:	88 27       	eor	r24, r24
 4ca:	77 fd       	sbrc	r23, 7
 4cc:	80 95       	com	r24
 4ce:	98 2f       	mov	r25, r24
 4d0:	0e 5f       	subi	r16, 0xFE	; 254
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
 4d4:	2f 76       	andi	r18, 0x6F	; 111
 4d6:	b2 2e       	mov	r11, r18
 4d8:	97 ff       	sbrs	r25, 7
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__stack+0x8f>
 4dc:	90 95       	com	r25
 4de:	80 95       	com	r24
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	20 68       	ori	r18, 0x80	; 128
 4ec:	b2 2e       	mov	r11, r18
 4ee:	2a e0       	ldi	r18, 0x0A	; 10
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	a4 01       	movw	r20, r8
 4f4:	0e 94 95 03 	call	0x72a	; 0x72a <__ultoa_invert>
 4f8:	a8 2e       	mov	r10, r24
 4fa:	a8 18       	sub	r10, r8
 4fc:	44 c0       	rjmp	.+136    	; 0x586 <__stack+0x127>
 4fe:	85 37       	cpi	r24, 0x75	; 117
 500:	29 f4       	brne	.+10     	; 0x50c <__stack+0xad>
 502:	2f 7e       	andi	r18, 0xEF	; 239
 504:	b2 2e       	mov	r11, r18
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	25 c0       	rjmp	.+74     	; 0x556 <__stack+0xf7>
 50c:	f2 2f       	mov	r31, r18
 50e:	f9 7f       	andi	r31, 0xF9	; 249
 510:	bf 2e       	mov	r11, r31
 512:	8f 36       	cpi	r24, 0x6F	; 111
 514:	c1 f0       	breq	.+48     	; 0x546 <__stack+0xe7>
 516:	18 f4       	brcc	.+6      	; 0x51e <__stack+0xbf>
 518:	88 35       	cpi	r24, 0x58	; 88
 51a:	79 f0       	breq	.+30     	; 0x53a <__stack+0xdb>
 51c:	b4 c0       	rjmp	.+360    	; 0x686 <__stack+0x227>
 51e:	80 37       	cpi	r24, 0x70	; 112
 520:	19 f0       	breq	.+6      	; 0x528 <__stack+0xc9>
 522:	88 37       	cpi	r24, 0x78	; 120
 524:	21 f0       	breq	.+8      	; 0x52e <__stack+0xcf>
 526:	af c0       	rjmp	.+350    	; 0x686 <__stack+0x227>
 528:	2f 2f       	mov	r18, r31
 52a:	20 61       	ori	r18, 0x10	; 16
 52c:	b2 2e       	mov	r11, r18
 52e:	b4 fe       	sbrs	r11, 4
 530:	0d c0       	rjmp	.+26     	; 0x54c <__stack+0xed>
 532:	8b 2d       	mov	r24, r11
 534:	84 60       	ori	r24, 0x04	; 4
 536:	b8 2e       	mov	r11, r24
 538:	09 c0       	rjmp	.+18     	; 0x54c <__stack+0xed>
 53a:	24 ff       	sbrs	r18, 4
 53c:	0a c0       	rjmp	.+20     	; 0x552 <__stack+0xf3>
 53e:	9f 2f       	mov	r25, r31
 540:	96 60       	ori	r25, 0x06	; 6
 542:	b9 2e       	mov	r11, r25
 544:	06 c0       	rjmp	.+12     	; 0x552 <__stack+0xf3>
 546:	28 e0       	ldi	r18, 0x08	; 8
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__stack+0xf7>
 54c:	20 e1       	ldi	r18, 0x10	; 16
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <__stack+0xf7>
 552:	20 e1       	ldi	r18, 0x10	; 16
 554:	32 e0       	ldi	r19, 0x02	; 2
 556:	f8 01       	movw	r30, r16
 558:	b7 fe       	sbrs	r11, 7
 55a:	07 c0       	rjmp	.+14     	; 0x56a <__stack+0x10b>
 55c:	60 81       	ld	r22, Z
 55e:	71 81       	ldd	r23, Z+1	; 0x01
 560:	82 81       	ldd	r24, Z+2	; 0x02
 562:	93 81       	ldd	r25, Z+3	; 0x03
 564:	0c 5f       	subi	r16, 0xFC	; 252
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	06 c0       	rjmp	.+12     	; 0x576 <__stack+0x117>
 56a:	60 81       	ld	r22, Z
 56c:	71 81       	ldd	r23, Z+1	; 0x01
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 5f       	subi	r16, 0xFE	; 254
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	a4 01       	movw	r20, r8
 578:	0e 94 95 03 	call	0x72a	; 0x72a <__ultoa_invert>
 57c:	a8 2e       	mov	r10, r24
 57e:	a8 18       	sub	r10, r8
 580:	fb 2d       	mov	r31, r11
 582:	ff 77       	andi	r31, 0x7F	; 127
 584:	bf 2e       	mov	r11, r31
 586:	b6 fe       	sbrs	r11, 6
 588:	0b c0       	rjmp	.+22     	; 0x5a0 <__stack+0x141>
 58a:	2b 2d       	mov	r18, r11
 58c:	2e 7f       	andi	r18, 0xFE	; 254
 58e:	a5 14       	cp	r10, r5
 590:	50 f4       	brcc	.+20     	; 0x5a6 <__stack+0x147>
 592:	b4 fe       	sbrs	r11, 4
 594:	0a c0       	rjmp	.+20     	; 0x5aa <__stack+0x14b>
 596:	b2 fc       	sbrc	r11, 2
 598:	08 c0       	rjmp	.+16     	; 0x5aa <__stack+0x14b>
 59a:	2b 2d       	mov	r18, r11
 59c:	2e 7e       	andi	r18, 0xEE	; 238
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <__stack+0x14b>
 5a0:	7a 2c       	mov	r7, r10
 5a2:	2b 2d       	mov	r18, r11
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <__stack+0x14d>
 5a6:	7a 2c       	mov	r7, r10
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <__stack+0x14d>
 5aa:	75 2c       	mov	r7, r5
 5ac:	24 ff       	sbrs	r18, 4
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <__stack+0x16b>
 5b0:	fe 01       	movw	r30, r28
 5b2:	ea 0d       	add	r30, r10
 5b4:	f1 1d       	adc	r31, r1
 5b6:	80 81       	ld	r24, Z
 5b8:	80 33       	cpi	r24, 0x30	; 48
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__stack+0x161>
 5bc:	29 7e       	andi	r18, 0xE9	; 233
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__stack+0x173>
 5c0:	22 ff       	sbrs	r18, 2
 5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <__stack+0x171>
 5c4:	73 94       	inc	r7
 5c6:	73 94       	inc	r7
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__stack+0x173>
 5ca:	82 2f       	mov	r24, r18
 5cc:	86 78       	andi	r24, 0x86	; 134
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__stack+0x173>
 5d0:	73 94       	inc	r7
 5d2:	23 fd       	sbrc	r18, 3
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <__stack+0x19d>
 5d6:	20 ff       	sbrs	r18, 0
 5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <__stack+0x187>
 5da:	5a 2c       	mov	r5, r10
 5dc:	73 14       	cp	r7, r3
 5de:	18 f4       	brcc	.+6      	; 0x5e6 <__stack+0x187>
 5e0:	53 0c       	add	r5, r3
 5e2:	57 18       	sub	r5, r7
 5e4:	73 2c       	mov	r7, r3
 5e6:	73 14       	cp	r7, r3
 5e8:	68 f4       	brcc	.+26     	; 0x604 <__stack+0x1a5>
 5ea:	b7 01       	movw	r22, r14
 5ec:	80 e2       	ldi	r24, 0x20	; 32
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	2c 87       	std	Y+12, r18	; 0x0c
 5f2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 5f6:	73 94       	inc	r7
 5f8:	2c 85       	ldd	r18, Y+12	; 0x0c
 5fa:	f5 cf       	rjmp	.-22     	; 0x5e6 <__stack+0x187>
 5fc:	73 14       	cp	r7, r3
 5fe:	10 f4       	brcc	.+4      	; 0x604 <__stack+0x1a5>
 600:	37 18       	sub	r3, r7
 602:	01 c0       	rjmp	.+2      	; 0x606 <__stack+0x1a7>
 604:	31 2c       	mov	r3, r1
 606:	24 ff       	sbrs	r18, 4
 608:	12 c0       	rjmp	.+36     	; 0x62e <__stack+0x1cf>
 60a:	b7 01       	movw	r22, r14
 60c:	80 e3       	ldi	r24, 0x30	; 48
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	2c 87       	std	Y+12, r18	; 0x0c
 612:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 616:	2c 85       	ldd	r18, Y+12	; 0x0c
 618:	22 ff       	sbrs	r18, 2
 61a:	17 c0       	rjmp	.+46     	; 0x64a <__stack+0x1eb>
 61c:	21 ff       	sbrs	r18, 1
 61e:	03 c0       	rjmp	.+6      	; 0x626 <__stack+0x1c7>
 620:	88 e5       	ldi	r24, 0x58	; 88
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <__stack+0x1cb>
 626:	88 e7       	ldi	r24, 0x78	; 120
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	b7 01       	movw	r22, r14
 62c:	0c c0       	rjmp	.+24     	; 0x646 <__stack+0x1e7>
 62e:	82 2f       	mov	r24, r18
 630:	86 78       	andi	r24, 0x86	; 134
 632:	59 f0       	breq	.+22     	; 0x64a <__stack+0x1eb>
 634:	21 fd       	sbrc	r18, 1
 636:	02 c0       	rjmp	.+4      	; 0x63c <__stack+0x1dd>
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	01 c0       	rjmp	.+2      	; 0x63e <__stack+0x1df>
 63c:	8b e2       	ldi	r24, 0x2B	; 43
 63e:	27 fd       	sbrc	r18, 7
 640:	8d e2       	ldi	r24, 0x2D	; 45
 642:	b7 01       	movw	r22, r14
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 64a:	a5 14       	cp	r10, r5
 64c:	38 f4       	brcc	.+14     	; 0x65c <__stack+0x1fd>
 64e:	b7 01       	movw	r22, r14
 650:	80 e3       	ldi	r24, 0x30	; 48
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 658:	5a 94       	dec	r5
 65a:	f7 cf       	rjmp	.-18     	; 0x64a <__stack+0x1eb>
 65c:	aa 94       	dec	r10
 65e:	f4 01       	movw	r30, r8
 660:	ea 0d       	add	r30, r10
 662:	f1 1d       	adc	r31, r1
 664:	80 81       	ld	r24, Z
 666:	b7 01       	movw	r22, r14
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 66e:	a1 10       	cpse	r10, r1
 670:	f5 cf       	rjmp	.-22     	; 0x65c <__stack+0x1fd>
 672:	33 20       	and	r3, r3
 674:	09 f4       	brne	.+2      	; 0x678 <__stack+0x219>
 676:	51 ce       	rjmp	.-862    	; 0x31a <vfprintf+0x24>
 678:	b7 01       	movw	r22, r14
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fputc>
 682:	3a 94       	dec	r3
 684:	f6 cf       	rjmp	.-20     	; 0x672 <__stack+0x213>
 686:	f7 01       	movw	r30, r14
 688:	86 81       	ldd	r24, Z+6	; 0x06
 68a:	97 81       	ldd	r25, Z+7	; 0x07
 68c:	02 c0       	rjmp	.+4      	; 0x692 <__stack+0x233>
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	9f ef       	ldi	r25, 0xFF	; 255
 692:	2c 96       	adiw	r28, 0x0c	; 12
 694:	e2 e1       	ldi	r30, 0x12	; 18
 696:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__epilogue_restores__>

0000069a <strnlen_P>:
 69a:	fc 01       	movw	r30, r24
 69c:	05 90       	lpm	r0, Z+
 69e:	61 50       	subi	r22, 0x01	; 1
 6a0:	70 40       	sbci	r23, 0x00	; 0
 6a2:	01 10       	cpse	r0, r1
 6a4:	d8 f7       	brcc	.-10     	; 0x69c <strnlen_P+0x2>
 6a6:	80 95       	com	r24
 6a8:	90 95       	com	r25
 6aa:	8e 0f       	add	r24, r30
 6ac:	9f 1f       	adc	r25, r31
 6ae:	08 95       	ret

000006b0 <strnlen>:
 6b0:	fc 01       	movw	r30, r24
 6b2:	61 50       	subi	r22, 0x01	; 1
 6b4:	70 40       	sbci	r23, 0x00	; 0
 6b6:	01 90       	ld	r0, Z+
 6b8:	01 10       	cpse	r0, r1
 6ba:	d8 f7       	brcc	.-10     	; 0x6b2 <strnlen+0x2>
 6bc:	80 95       	com	r24
 6be:	90 95       	com	r25
 6c0:	8e 0f       	add	r24, r30
 6c2:	9f 1f       	adc	r25, r31
 6c4:	08 95       	ret

000006c6 <fputc>:
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	18 2f       	mov	r17, r24
 6d0:	09 2f       	mov	r16, r25
 6d2:	eb 01       	movw	r28, r22
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	81 fd       	sbrc	r24, 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <fputc+0x1a>
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	9f ef       	ldi	r25, 0xFF	; 255
 6de:	20 c0       	rjmp	.+64     	; 0x720 <fputc+0x5a>
 6e0:	82 ff       	sbrs	r24, 2
 6e2:	10 c0       	rjmp	.+32     	; 0x704 <fputc+0x3e>
 6e4:	4e 81       	ldd	r20, Y+6	; 0x06
 6e6:	5f 81       	ldd	r21, Y+7	; 0x07
 6e8:	2c 81       	ldd	r18, Y+4	; 0x04
 6ea:	3d 81       	ldd	r19, Y+5	; 0x05
 6ec:	42 17       	cp	r20, r18
 6ee:	53 07       	cpc	r21, r19
 6f0:	7c f4       	brge	.+30     	; 0x710 <fputc+0x4a>
 6f2:	e8 81       	ld	r30, Y
 6f4:	f9 81       	ldd	r31, Y+1	; 0x01
 6f6:	9f 01       	movw	r18, r30
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	39 83       	std	Y+1, r19	; 0x01
 6fe:	28 83       	st	Y, r18
 700:	10 83       	st	Z, r17
 702:	06 c0       	rjmp	.+12     	; 0x710 <fputc+0x4a>
 704:	e8 85       	ldd	r30, Y+8	; 0x08
 706:	f9 85       	ldd	r31, Y+9	; 0x09
 708:	81 2f       	mov	r24, r17
 70a:	09 95       	icall
 70c:	89 2b       	or	r24, r25
 70e:	29 f7       	brne	.-54     	; 0x6da <fputc+0x14>
 710:	2e 81       	ldd	r18, Y+6	; 0x06
 712:	3f 81       	ldd	r19, Y+7	; 0x07
 714:	2f 5f       	subi	r18, 0xFF	; 255
 716:	3f 4f       	sbci	r19, 0xFF	; 255
 718:	3f 83       	std	Y+7, r19	; 0x07
 71a:	2e 83       	std	Y+6, r18	; 0x06
 71c:	81 2f       	mov	r24, r17
 71e:	90 2f       	mov	r25, r16
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	08 95       	ret

0000072a <__ultoa_invert>:
 72a:	fa 01       	movw	r30, r20
 72c:	aa 27       	eor	r26, r26
 72e:	28 30       	cpi	r18, 0x08	; 8
 730:	51 f1       	breq	.+84     	; 0x786 <__ultoa_invert+0x5c>
 732:	20 31       	cpi	r18, 0x10	; 16
 734:	81 f1       	breq	.+96     	; 0x796 <__ultoa_invert+0x6c>
 736:	e8 94       	clt
 738:	6f 93       	push	r22
 73a:	6e 7f       	andi	r22, 0xFE	; 254
 73c:	6e 5f       	subi	r22, 0xFE	; 254
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	af 4f       	sbci	r26, 0xFF	; 255
 746:	b1 e0       	ldi	r27, 0x01	; 1
 748:	3e d0       	rcall	.+124    	; 0x7c6 <__ultoa_invert+0x9c>
 74a:	b4 e0       	ldi	r27, 0x04	; 4
 74c:	3c d0       	rcall	.+120    	; 0x7c6 <__ultoa_invert+0x9c>
 74e:	67 0f       	add	r22, r23
 750:	78 1f       	adc	r23, r24
 752:	89 1f       	adc	r24, r25
 754:	9a 1f       	adc	r25, r26
 756:	a1 1d       	adc	r26, r1
 758:	68 0f       	add	r22, r24
 75a:	79 1f       	adc	r23, r25
 75c:	8a 1f       	adc	r24, r26
 75e:	91 1d       	adc	r25, r1
 760:	a1 1d       	adc	r26, r1
 762:	6a 0f       	add	r22, r26
 764:	71 1d       	adc	r23, r1
 766:	81 1d       	adc	r24, r1
 768:	91 1d       	adc	r25, r1
 76a:	a1 1d       	adc	r26, r1
 76c:	20 d0       	rcall	.+64     	; 0x7ae <__ultoa_invert+0x84>
 76e:	09 f4       	brne	.+2      	; 0x772 <__ultoa_invert+0x48>
 770:	68 94       	set
 772:	3f 91       	pop	r19
 774:	2a e0       	ldi	r18, 0x0A	; 10
 776:	26 9f       	mul	r18, r22
 778:	11 24       	eor	r1, r1
 77a:	30 19       	sub	r19, r0
 77c:	30 5d       	subi	r19, 0xD0	; 208
 77e:	31 93       	st	Z+, r19
 780:	de f6       	brtc	.-74     	; 0x738 <__ultoa_invert+0xe>
 782:	cf 01       	movw	r24, r30
 784:	08 95       	ret
 786:	46 2f       	mov	r20, r22
 788:	47 70       	andi	r20, 0x07	; 7
 78a:	40 5d       	subi	r20, 0xD0	; 208
 78c:	41 93       	st	Z+, r20
 78e:	b3 e0       	ldi	r27, 0x03	; 3
 790:	0f d0       	rcall	.+30     	; 0x7b0 <__ultoa_invert+0x86>
 792:	c9 f7       	brne	.-14     	; 0x786 <__ultoa_invert+0x5c>
 794:	f6 cf       	rjmp	.-20     	; 0x782 <__ultoa_invert+0x58>
 796:	46 2f       	mov	r20, r22
 798:	4f 70       	andi	r20, 0x0F	; 15
 79a:	40 5d       	subi	r20, 0xD0	; 208
 79c:	4a 33       	cpi	r20, 0x3A	; 58
 79e:	18 f0       	brcs	.+6      	; 0x7a6 <__ultoa_invert+0x7c>
 7a0:	49 5d       	subi	r20, 0xD9	; 217
 7a2:	31 fd       	sbrc	r19, 1
 7a4:	40 52       	subi	r20, 0x20	; 32
 7a6:	41 93       	st	Z+, r20
 7a8:	02 d0       	rcall	.+4      	; 0x7ae <__ultoa_invert+0x84>
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__ultoa_invert+0x6c>
 7ac:	ea cf       	rjmp	.-44     	; 0x782 <__ultoa_invert+0x58>
 7ae:	b4 e0       	ldi	r27, 0x04	; 4
 7b0:	a6 95       	lsr	r26
 7b2:	97 95       	ror	r25
 7b4:	87 95       	ror	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	ba 95       	dec	r27
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__ultoa_invert+0x86>
 7be:	00 97       	sbiw	r24, 0x00	; 0
 7c0:	61 05       	cpc	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	08 95       	ret
 7c6:	9b 01       	movw	r18, r22
 7c8:	ac 01       	movw	r20, r24
 7ca:	0a 2e       	mov	r0, r26
 7cc:	06 94       	lsr	r0
 7ce:	57 95       	ror	r21
 7d0:	47 95       	ror	r20
 7d2:	37 95       	ror	r19
 7d4:	27 95       	ror	r18
 7d6:	ba 95       	dec	r27
 7d8:	c9 f7       	brne	.-14     	; 0x7cc <__ultoa_invert+0xa2>
 7da:	62 0f       	add	r22, r18
 7dc:	73 1f       	adc	r23, r19
 7de:	84 1f       	adc	r24, r20
 7e0:	95 1f       	adc	r25, r21
 7e2:	a0 1d       	adc	r26, r0
 7e4:	08 95       	ret

000007e6 <__prologue_saves__>:
 7e6:	2f 92       	push	r2
 7e8:	3f 92       	push	r3
 7ea:	4f 92       	push	r4
 7ec:	5f 92       	push	r5
 7ee:	6f 92       	push	r6
 7f0:	7f 92       	push	r7
 7f2:	8f 92       	push	r8
 7f4:	9f 92       	push	r9
 7f6:	af 92       	push	r10
 7f8:	bf 92       	push	r11
 7fa:	cf 92       	push	r12
 7fc:	df 92       	push	r13
 7fe:	ef 92       	push	r14
 800:	ff 92       	push	r15
 802:	0f 93       	push	r16
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	ca 1b       	sub	r28, r26
 810:	db 0b       	sbc	r29, r27
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	de bf       	out	0x3e, r29	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	09 94       	ijmp

0000081e <__epilogue_restores__>:
 81e:	2a 88       	ldd	r2, Y+18	; 0x12
 820:	39 88       	ldd	r3, Y+17	; 0x11
 822:	48 88       	ldd	r4, Y+16	; 0x10
 824:	5f 84       	ldd	r5, Y+15	; 0x0f
 826:	6e 84       	ldd	r6, Y+14	; 0x0e
 828:	7d 84       	ldd	r7, Y+13	; 0x0d
 82a:	8c 84       	ldd	r8, Y+12	; 0x0c
 82c:	9b 84       	ldd	r9, Y+11	; 0x0b
 82e:	aa 84       	ldd	r10, Y+10	; 0x0a
 830:	b9 84       	ldd	r11, Y+9	; 0x09
 832:	c8 84       	ldd	r12, Y+8	; 0x08
 834:	df 80       	ldd	r13, Y+7	; 0x07
 836:	ee 80       	ldd	r14, Y+6	; 0x06
 838:	fd 80       	ldd	r15, Y+5	; 0x05
 83a:	0c 81       	ldd	r16, Y+4	; 0x04
 83c:	1b 81       	ldd	r17, Y+3	; 0x03
 83e:	aa 81       	ldd	r26, Y+2	; 0x02
 840:	b9 81       	ldd	r27, Y+1	; 0x01
 842:	ce 0f       	add	r28, r30
 844:	d1 1d       	adc	r29, r1
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	ed 01       	movw	r28, r26
 852:	08 95       	ret

00000854 <_exit>:
 854:	f8 94       	cli

00000856 <__stop_program>:
 856:	ff cf       	rjmp	.-2      	; 0x856 <__stop_program>
