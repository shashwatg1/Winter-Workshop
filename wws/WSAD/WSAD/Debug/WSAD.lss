
WSAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000025b  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000101  00000000  00000000  000003f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b5  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016b  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000090  00000000  00000000  0000087b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	PORTC=(1<<PC1)|(1<<PC4);
}
int main(void)
{
	DDRC=setit;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD=setit;
  70:	81 bb       	out	0x11, r24	; 17
	PORTC=setit1;
  72:	15 ba       	out	0x15, r1	; 21
	PORTD=(1<<PD4)|(1<<PD5);
  74:	80 e3       	ldi	r24, 0x30	; 48
  76:	82 bb       	out	0x12, r24	; 18
#include <util/delay.h>
#define setit ~0
#define setit1 0
void W()
{
	PORTC=(1<<PC0)|(1<<PC4);
  78:	31 e1       	ldi	r19, 0x11	; 17
	
}
void A()
{
	PORTC=(1<<PC0)|(1<<PC5);
  7a:	21 e2       	ldi	r18, 0x21	; 33
	
}
void S()
{
	PORTC=(1<<PC1)|(1<<PC5);
  7c:	92 e2       	ldi	r25, 0x22	; 34
}
void D()
{
	PORTC=(1<<PC1)|(1<<PC4);
  7e:	82 e1       	ldi	r24, 0x12	; 18
#include <util/delay.h>
#define setit ~0
#define setit1 0
void W()
{
	PORTC=(1<<PC0)|(1<<PC4);
  80:	35 bb       	out	0x15, r19	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	4f ef       	ldi	r20, 0xFF	; 255
  84:	59 e6       	ldi	r21, 0x69	; 105
  86:	68 e1       	ldi	r22, 0x18	; 24
  88:	41 50       	subi	r20, 0x01	; 1
  8a:	50 40       	sbci	r21, 0x00	; 0
  8c:	60 40       	sbci	r22, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
	
}
void A()
{
	PORTC=(1<<PC0)|(1<<PC5);
  94:	25 bb       	out	0x15, r18	; 21
  96:	4f ef       	ldi	r20, 0xFF	; 255
  98:	59 e6       	ldi	r21, 0x69	; 105
  9a:	68 e1       	ldi	r22, 0x18	; 24
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
	
}
void S()
{
	PORTC=(1<<PC1)|(1<<PC5);
  a8:	95 bb       	out	0x15, r25	; 21
  aa:	4f ef       	ldi	r20, 0xFF	; 255
  ac:	59 e6       	ldi	r21, 0x69	; 105
  ae:	68 e1       	ldi	r22, 0x18	; 24
  b0:	41 50       	subi	r20, 0x01	; 1
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	60 40       	sbci	r22, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
}
void D()
{
	PORTC=(1<<PC1)|(1<<PC4);
  bc:	85 bb       	out	0x15, r24	; 21
  be:	4f ef       	ldi	r20, 0xFF	; 255
  c0:	59 e6       	ldi	r21, 0x69	; 105
  c2:	68 e1       	ldi	r22, 0x18	; 24
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	60 40       	sbci	r22, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
  d0:	d7 cf       	rjmp	.-82     	; 0x80 <main+0x14>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
