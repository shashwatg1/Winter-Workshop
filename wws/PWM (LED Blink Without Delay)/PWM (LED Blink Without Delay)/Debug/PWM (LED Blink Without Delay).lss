
PWM (LED Blink Without Delay).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000097  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000062  00000000  00000000  00000239  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d1  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016b  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000036  00000000  00000000  000004fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define setit ~0
#define setit1 0
int main(void)
{
	DDRB = setit;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB= setit1;
  70:	18 ba       	out	0x18, r1	; 24
	
	long ctr=0;
	TCCR0 = (1<<CS02)|(1<<CS00);
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	83 bf       	out	0x33, r24	; 51
	//TCNT0 = 0;
	TCNT0=0;
  76:	12 be       	out	0x32, r1	; 50
//#define F_CPU 16000000UL
#include <avr/io.h>
#define setit ~0
#define setit1 0
int main(void)
{
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	d0 e0       	ldi	r29, 0x00	; 0
  7c:	c0 e0       	ldi	r28, 0x00	; 0
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	c1 2e       	mov	r12, r17
  82:	dd 2e       	mov	r13, r29
  84:	ec 2e       	mov	r14, r28
  86:	ff 2e       	mov	r15, r31
	TCCR0 = (1<<CS02)|(1<<CS00);
	//TCNT0 = 0;
	TCNT0=0;
	while(1)
	{
		if (TCNT0==255)
  88:	82 b7       	in	r24, 0x32	; 50
  8a:	8f 3f       	cpi	r24, 0xFF	; 255
  8c:	31 f4       	brne	.+12     	; 0x9a <main+0x2e>
		{
			ctr++;
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	c2 1a       	sub	r12, r18
  92:	d2 0a       	sbc	r13, r18
  94:	e2 0a       	sbc	r14, r18
  96:	f2 0a       	sbc	r15, r18
			TCNT0=0;
  98:	12 be       	out	0x32, r1	; 50
		}
		if ((TCNT0 + ctr*255)==4650)
  9a:	e2 b7       	in	r30, 0x32	; 50
  9c:	af ef       	ldi	r26, 0xFF	; 255
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	a7 01       	movw	r20, r14
  a2:	96 01       	movw	r18, r12
  a4:	0e 94 63 00 	call	0xc6	; 0xc6 <__muluhisi3>
  a8:	dc 01       	movw	r26, r24
  aa:	cb 01       	movw	r24, r22
  ac:	8e 0f       	add	r24, r30
  ae:	91 1d       	adc	r25, r1
  b0:	a1 1d       	adc	r26, r1
  b2:	b1 1d       	adc	r27, r1
  b4:	8a 32       	cpi	r24, 0x2A	; 42
  b6:	92 41       	sbci	r25, 0x12	; 18
  b8:	a1 05       	cpc	r26, r1
  ba:	b1 05       	cpc	r27, r1
  bc:	29 f7       	brne	.-54     	; 0x88 <main+0x1c>
		{
			PORTB^=~0;
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 95       	com	r24
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	dd cf       	rjmp	.-70     	; 0x80 <main+0x14>

000000c6 <__muluhisi3>:
  c6:	0e 94 6e 00 	call	0xdc	; 0xdc <__umulhisi3>
  ca:	a5 9f       	mul	r26, r21
  cc:	90 0d       	add	r25, r0
  ce:	b4 9f       	mul	r27, r20
  d0:	90 0d       	add	r25, r0
  d2:	a4 9f       	mul	r26, r20
  d4:	80 0d       	add	r24, r0
  d6:	91 1d       	adc	r25, r1
  d8:	11 24       	eor	r1, r1
  da:	08 95       	ret

000000dc <__umulhisi3>:
  dc:	a2 9f       	mul	r26, r18
  de:	b0 01       	movw	r22, r0
  e0:	b3 9f       	mul	r27, r19
  e2:	c0 01       	movw	r24, r0
  e4:	a3 9f       	mul	r26, r19
  e6:	70 0d       	add	r23, r0
  e8:	81 1d       	adc	r24, r1
  ea:	11 24       	eor	r1, r1
  ec:	91 1d       	adc	r25, r1
  ee:	b2 9f       	mul	r27, r18
  f0:	70 0d       	add	r23, r0
  f2:	81 1d       	adc	r24, r1
  f4:	11 24       	eor	r1, r1
  f6:	91 1d       	adc	r25, r1
  f8:	08 95       	ret

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
