
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c4  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000175  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000100  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001aa  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000111  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main()
   { int i;
	 DDRB=0b00011100;
  6c:	8c e1       	ldi	r24, 0x1C	; 28
  6e:	87 bb       	out	0x17, r24	; 23
	 PORTB=0b00010100;
  70:	84 e1       	ldi	r24, 0x14	; 20
  72:	88 bb       	out	0x18, r24	; 24
	TCCR0=(1<<WGM00)|(1<<WGM01);
  74:	88 e4       	ldi	r24, 0x48	; 72
  76:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(0<<COM00)|(1<<COM01);
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	83 bf       	out	0x33, r24	; 51
    TCCR0|=(1<<CS01)|(1<<CS00)|(0<<CS02);
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	83 60       	ori	r24, 0x03	; 3
  82:	83 bf       	out	0x33, r24	; 51
	while (1)
	{for(i=0;i<255;i++)
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	08 c0       	rjmp	.+16     	; 0xa2 <main+0x36>
		{OCR0=i;
  92:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef e3       	ldi	r30, 0x3F	; 63
  96:	fc e9       	ldi	r31, 0x9C	; 156
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
	 PORTB=0b00010100;
	TCCR0=(1<<WGM00)|(1<<WGM01);
	TCCR0|=(0<<COM00)|(1<<COM01);
    TCCR0|=(1<<CS01)|(1<<CS00)|(0<<CS02);
	while (1)
	{for(i=0;i<255;i++)
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	8f 3f       	cpi	r24, 0xFF	; 255
  a4:	91 05       	cpc	r25, r1
  a6:	ac f3       	brlt	.-22     	; 0x92 <main+0x26>
  a8:	c9 01       	movw	r24, r18
		{OCR0=i;
		_delay_ms(10);
		}
for(i=255;i>=0;i--)
		{
			OCR0=i;
  aa:	8c bf       	out	0x3c, r24	; 60
  ac:	ef e3       	ldi	r30, 0x3F	; 63
  ae:	fc e9       	ldi	r31, 0x9C	; 156
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
	while (1)
	{for(i=0;i<255;i++)
		{OCR0=i;
		_delay_ms(10);
		}
for(i=255;i>=0;i--)
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b8 f7       	brcc	.-18     	; 0xaa <main+0x3e>
	 PORTB=0b00010100;
	TCCR0=(1<<WGM00)|(1<<WGM01);
	TCCR0|=(0<<COM00)|(1<<COM01);
    TCCR0|=(1<<CS01)|(1<<CS00)|(0<<CS02);
	while (1)
	{for(i=0;i<255;i++)
  bc:	ca 01       	movw	r24, r20
  be:	f1 cf       	rjmp	.-30     	; 0xa2 <main+0x36>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
