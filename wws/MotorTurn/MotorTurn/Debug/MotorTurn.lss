
MotorTurn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000988  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b6  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00001840  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012bd  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  00002c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2e  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00003cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000870  00000000  00000000  0000424a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00004aba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8a:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
}


void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd&(0xF0);
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	98 bb       	out	0x18, r25	; 24
	Control_PORT &= ~(1<<RS);
  98:	c0 98       	cbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  9a:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  9c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef e9       	ldi	r30, 0x9F	; 159
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_cmd+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_cmd+0x16>
  a8:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  aa:	c2 98       	cbi	0x18, 2	; 24
  ac:	ef e9       	ldi	r30, 0x9F	; 159
  ae:	ff e0       	ldi	r31, 0x0F	; 15
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_cmd+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_cmd+0x24>
  b6:	00 00       	nop
	_delay_ms(1);
	LCD_DATA=(cmd<<4)&(0xF0);
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	82 95       	swap	r24
  bc:	92 95       	swap	r25
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	98 27       	eor	r25, r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	98 27       	eor	r25, r24
  c6:	88 bb       	out	0x18, r24	; 24
	Control_PORT &= ~(1<<RS);
  c8:	c0 98       	cbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  ca:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  cc:	c2 9a       	sbi	0x18, 2	; 24
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_cmd+0x40>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_cmd+0x46>
  d8:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  da:	c2 98       	cbi	0x18, 2	; 24
  dc:	ef e9       	ldi	r30, 0x9F	; 159
  de:	ff e0       	ldi	r31, 0x0F	; 15
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_cmd+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_cmd+0x54>
  e6:	00 00       	nop
	_delay_ms(1);
	return;
}
  e8:	08 95       	ret

000000ea <LCD_write>:

void LCD_write(unsigned char data)
{
	LCD_DATA= data&(0xF0);
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	98 bb       	out	0x18, r25	; 24
	Control_PORT |= (1<<RS);
  f0:	c0 9a       	sbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  f2:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  f4:	c2 9a       	sbi	0x18, 2	; 24
  f6:	ef e9       	ldi	r30, 0x9F	; 159
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_write+0x10>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_write+0x16>
 100:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
 102:	c2 98       	cbi	0x18, 2	; 24
 104:	ef e9       	ldi	r30, 0x9F	; 159
 106:	ff e0       	ldi	r31, 0x0F	; 15
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_write+0x1e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_write+0x24>
 10e:	00 00       	nop
	_delay_ms(1);	// EN and RW as LOW and RS HIGH
	
	LCD_DATA= (data<<4)&(0xF0);
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	82 95       	swap	r24
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	98 27       	eor	r25, r24
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	98 27       	eor	r25, r24
 11e:	88 bb       	out	0x18, r24	; 24
	Control_PORT |= (1<<RS);
 120:	c0 9a       	sbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
 122:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
 124:	c2 9a       	sbi	0x18, 2	; 24
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_write+0x40>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_write+0x46>
 130:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);
 132:	c2 98       	cbi	0x18, 2	; 24
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_write+0x4e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_write+0x54>
 13e:	00 00       	nop
	_delay_ms(1);			// delay to get things executed
	return ;
}
 140:	08 95       	ret

00000142 <clear_display>:

// The functions after this comment are the different commands for LCD

void clear_display() // Clears display and returns cursor to the home position (address 0)
{
	LCD_cmd(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
 148:	08 95       	ret

0000014a <cursor_home>:

void cursor_home() // Returns cursor to home position (address 0). Also returns display being shifted to the original position. DDRAM contents remains unchanged.
{
	LCD_cmd(0x02);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
 150:	08 95       	ret

00000152 <Entry_mode_set>:
	/*
	S is to decide Shift
	0 - No Display Shift
	1 - Display Shift
	*/
	unsigned char entry = (1<<2) | (1<<I_D) | (S); // formula to generate command byte
 152:	64 60       	ori	r22, 0x04	; 4
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <Entry_mode_set+0xc>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <Entry_mode_set+0x8>
	LCD_cmd(entry);
 162:	86 2f       	mov	r24, r22
 164:	82 2b       	or	r24, r18
 166:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
 16a:	08 95       	ret

0000016c <display_control>:
	/*
	B is to set whether the cursor will blink or not
	0 - Blink off
	1 - Blink on
	*/
	unsigned char display = (1<<3) | (D<<2) | (C<<1) | (B); // formula to generate command byte
 16c:	88 0f       	add	r24, r24
 16e:	88 0f       	add	r24, r24
 170:	48 2b       	or	r20, r24
 172:	48 60       	ori	r20, 0x08	; 8
 174:	86 2f       	mov	r24, r22
 176:	88 0f       	add	r24, r24
	LCD_cmd(display);
 178:	84 2b       	or	r24, r20
 17a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	
}
 17e:	08 95       	ret

00000180 <cursor_display_shift>:
	/*
	R_L is to specify the direction of shift
	0 is for Left
	1 is for right
	*/
	unsigned char shift = (1<<4) | (S_C<<3) | (R_L<<2); // formula to generate command byte
 180:	88 0f       	add	r24, r24
 182:	88 0f       	add	r24, r24
 184:	88 0f       	add	r24, r24
 186:	80 61       	ori	r24, 0x10	; 16
 188:	66 0f       	add	r22, r22
 18a:	66 0f       	add	r22, r22
	LCD_cmd(shift);
 18c:	86 2b       	or	r24, r22
 18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
 192:	08 95       	ret

00000194 <function_set>:
	    0 1    1    5x10 dots  1/11   -
	    1 *    2    5x 7 dots  1/16  Cannot display 2 lines with 5x10 dot character font
	*/
	// when N = 1 then two lines of display
	// when N = 0
	unsigned char func = (1<<5) | (DL<<4) | (N<<3) | (F<<2);
 194:	82 95       	swap	r24
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	66 0f       	add	r22, r22
 19c:	66 0f       	add	r22, r22
 19e:	66 0f       	add	r22, r22
 1a0:	68 2b       	or	r22, r24
 1a2:	84 2f       	mov	r24, r20
 1a4:	88 0f       	add	r24, r24
 1a6:	88 0f       	add	r24, r24
	LCD_cmd(func);
 1a8:	86 2b       	or	r24, r22
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
 1ae:	08 95       	ret

000001b0 <init_LCD>:
 */ 
#include "LCD.h"

void init_LCD()
{
	function_set(0,1,0);//DL = 1 for 8-bit interface, N = 1 to set the fonts for 2 line display and if N = 1 then value of F doesn't matter	
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	0e 94 ca 00 	call	0x194	; 0x194 <function_set>
	
	clear_display();
 1ba:	0e 94 a1 00 	call	0x142	; 0x142 <clear_display>
	
	display_control(1,1,1);//D = 1, so that display is On, C = 1, so that cursor is On, B = 1 so that cursor is blinking
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	0e 94 b6 00 	call	0x16c	; 0x16c <display_control>
	
	Entry_mode_set(1,0);// I_D = 1 so that the cursor position should increment after each character display. S = 0 because we don't want the display to shift after each character display
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	0e 94 a9 00 	call	0x152	; 0x152 <Entry_mode_set>
}
 1d0:	08 95       	ret

000001d2 <set_DDRAM_address>:
void set_DDRAM_address(unsigned char address) // Sets the DDRAM address. DDRAM data is sent or received after this setting.
{
	unsigned char display_address = (1<<7) | address; // formula for calculating the command byte
	// this command is to set the cursor on the inputted address
	
	LCD_cmd(display_address);
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
}
 1d8:	08 95       	ret

000001da <print_string>:

void print_string(char word[])
{
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	unsigned char i=0; // iterating variable
	unsigned char length = (unsigned char)strlen(word); // length of the word
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f9 2f       	mov	r31, r25
 1e6:	df 01       	movw	r26, r30
 1e8:	0d 90       	ld	r0, X+
 1ea:	00 20       	and	r0, r0
 1ec:	e9 f7       	brne	.-6      	; 0x1e8 <print_string+0xe>
 1ee:	11 97       	sbiw	r26, 0x01	; 1
 1f0:	0a 2f       	mov	r16, r26
 1f2:	08 1b       	sub	r16, r24
	
	// Printing the word
	for(i=0;i<length;i++)
 1f4:	49 f0       	breq	.+18     	; 0x208 <print_string+0x2e>
 1f6:	c8 2f       	mov	r28, r24
 1f8:	d9 2f       	mov	r29, r25
 1fa:	10 e0       	ldi	r17, 0x00	; 0
	{
	LCD_write(word[i]);
 1fc:	89 91       	ld	r24, Y+
 1fe:	0e 94 75 00 	call	0xea	; 0xea <LCD_write>
{
	unsigned char i=0; // iterating variable
	unsigned char length = (unsigned char)strlen(word); // length of the word
	
	// Printing the word
	for(i=0;i<length;i++)
 202:	1f 5f       	subi	r17, 0xFF	; 255
 204:	10 17       	cp	r17, r16
 206:	d0 f3       	brcs	.-12     	; 0x1fc <print_string+0x22>
	{
	LCD_write(word[i]);
	//_delay_ms(1000);
	}	
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <print_integer>:

void print_integer(int number)// This function prints integer on LCD
{
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	2a 97       	sbiw	r28, 0x0a	; 10
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
	char num[10];
	sprintf(num,"%d",number); // function sprintf converts integer to string
 22a:	00 d0       	rcall	.+0      	; 0x22c <print_integer+0x1a>
 22c:	00 d0       	rcall	.+0      	; 0x22e <print_integer+0x1c>
 22e:	00 d0       	rcall	.+0      	; 0x230 <print_integer+0x1e>
 230:	ed b7       	in	r30, 0x3d	; 61
 232:	fe b7       	in	r31, 0x3e	; 62
 234:	31 96       	adiw	r30, 0x01	; 1
 236:	8e 01       	movw	r16, r28
 238:	0f 5f       	subi	r16, 0xFF	; 255
 23a:	1f 4f       	sbci	r17, 0xFF	; 255
 23c:	ad b7       	in	r26, 0x3d	; 61
 23e:	be b7       	in	r27, 0x3e	; 62
 240:	12 96       	adiw	r26, 0x02	; 2
 242:	1c 93       	st	X, r17
 244:	0e 93       	st	-X, r16
 246:	11 97       	sbiw	r26, 0x01	; 1
 248:	20 e6       	ldi	r18, 0x60	; 96
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	33 83       	std	Z+3, r19	; 0x03
 24e:	22 83       	std	Z+2, r18	; 0x02
 250:	95 83       	std	Z+5, r25	; 0x05
 252:	84 83       	std	Z+4, r24	; 0x04
 254:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <sprintf>
	
	print_string(num);
 258:	8d b7       	in	r24, 0x3d	; 61
 25a:	9e b7       	in	r25, 0x3e	; 62
 25c:	06 96       	adiw	r24, 0x06	; 6
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	9e bf       	out	0x3e, r25	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	8d bf       	out	0x3d, r24	; 61
 268:	c8 01       	movw	r24, r16
 26a:	0e 94 ed 00 	call	0x1da	; 0x1da <print_string>
}
 26e:	2a 96       	adiw	r28, 0x0a	; 10
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <scrolling_text>:
for R_L = 0
scrolls from right to left
for R_L = 1
scrolls form left to right
*/
{
 284:	c8 2f       	mov	r28, r24
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	94 e3       	ldi	r25, 0x34	; 52
 28a:	ac e0       	ldi	r26, 0x0C	; 12
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	a0 40       	sbci	r26, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <scrolling_text+0x8>
 294:	00 c0       	rjmp	.+0      	; 0x296 <scrolling_text+0x12>
 296:	00 00       	nop
	while(1)
	{
		_delay_ms(250);
		cursor_display_shift(1,R_L);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	6c 2f       	mov	r22, r28
 29c:	0e 94 c0 00 	call	0x180	; 0x180 <cursor_display_shift>
 2a0:	f2 cf       	rjmp	.-28     	; 0x286 <scrolling_text+0x2>

000002a2 <main>:
#define m2sta 330

int main(void)

{
	init_LCD();
 2a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <init_LCD>
	DDRD=~0;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	81 bb       	out	0x11, r24	; 17
	DDRC=~0;
 2aa:	84 bb       	out	0x14, r24	; 20
	DDRA=0;
 2ac:	1a ba       	out	0x1a, r1	; 26
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1);
 2ae:	8f b5       	in	r24, 0x2f	; 47
 2b0:	80 6a       	ori	r24, 0xA0	; 160
 2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM11)|(1<<WGM12)|(1<<CS10)|(1<<CS12);
 2b4:	8e b5       	in	r24, 0x2e	; 46
 2b6:	8f 60       	ori	r24, 0x0F	; 15
 2b8:	8e bd       	out	0x2e, r24	; 46
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 2ba:	86 b1       	in	r24, 0x06	; 6
 2bc:	87 68       	ori	r24, 0x87	; 135
 2be:	86 b9       	out	0x06, r24	; 6
	ADMUX|=(1<<REFS0)|(0<<ADLAR);	
 2c0:	3e 9a       	sbi	0x07, 6	; 7
		   		  
		   
		   		   
		   if ((a>325)&&(a<350))
		   {
		       OCR1A=((a-m1sta)/(m1max-m1sta))*1023;
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f2 e1       	ldi	r31, 0x12	; 18
 2c6:	cf 2e       	mov	r12, r31
 2c8:	dd 24       	eor	r13, r13
 2ca:	f0 2d       	mov	r31, r0
 2cc:	0f ef       	ldi	r16, 0xFF	; 255
 2ce:	13 e0       	ldi	r17, 0x03	; 3
			   PORTC|=(1<<PC2)|(1<<PC4);
			   
		   }
		   else if ((a<325)&&(a>290))
		   {
			   OCR1A=((m1sta-a)/(m1sta-m1min))*1023;
 2d0:	0f 2e       	mov	r0, r31
 2d2:	fa e4       	ldi	r31, 0x4A	; 74
 2d4:	ef 2e       	mov	r14, r31
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	ff 2e       	mov	r15, r31
 2da:	f0 2d       	mov	r31, r0
 2dc:	0f 2e       	mov	r0, r31
 2de:	fe e1       	ldi	r31, 0x1E	; 30
 2e0:	af 2e       	mov	r10, r31
 2e2:	bb 24       	eor	r11, r11
 2e4:	f0 2d       	mov	r31, r0
	ADMUX|=(1<<REFS0)|(0<<ADLAR);	
			
	
    while(1)
    {	   
	       ADMUX|=(1<<ADSC);
 2e6:	3e 9a       	sbi	0x07, 6	; 7
	       ADMUX|=(1<<PA1);  
 2e8:	39 9a       	sbi	0x07, 1	; 7
       	   int a;
		   a=ADC;
 2ea:	c4 b1       	in	r28, 0x04	; 4
 2ec:	d5 b1       	in	r29, 0x05	; 5
		   		  
		   
		   		   
		   if ((a>325)&&(a<350))
		   {
		       OCR1A=((a-m1sta)/(m1max-m1sta))*1023;
 2ee:	ce 01       	movw	r24, r28
 2f0:	8a 54       	subi	r24, 0x4A	; 74
 2f2:	91 40       	sbci	r25, 0x01	; 1
 2f4:	b6 01       	movw	r22, r12
 2f6:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 2fa:	60 9f       	mul	r22, r16
 2fc:	90 01       	movw	r18, r0
 2fe:	61 9f       	mul	r22, r17
 300:	30 0d       	add	r19, r0
 302:	70 9f       	mul	r23, r16
 304:	30 0d       	add	r19, r0
 306:	11 24       	eor	r1, r1
			   PORTC|=(1<<PC2)|(1<<PC4);
			   
		   }
		   else if ((a<325)&&(a>290))
		   {
			   OCR1A=((m1sta-a)/(m1sta-m1min))*1023;
 308:	c7 01       	movw	r24, r14
 30a:	8c 1b       	sub	r24, r28
 30c:	9d 0b       	sbc	r25, r29
 30e:	b5 01       	movw	r22, r10
 310:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 314:	60 9f       	mul	r22, r16
 316:	f0 01       	movw	r30, r0
 318:	61 9f       	mul	r22, r17
 31a:	f0 0d       	add	r31, r0
 31c:	70 9f       	mul	r23, r16
 31e:	f0 0d       	add	r31, r0
 320:	11 24       	eor	r1, r1
		   a=ADC;
		   while(ADMUX&(1<<ADSC))		   
		   		  
		   
		   		   
		   if ((a>325)&&(a<350))
 322:	ce 01       	movw	r24, r28
 324:	86 54       	subi	r24, 0x46	; 70
 326:	91 40       	sbci	r25, 0x01	; 1
		       OCR1A=((a-m1sta)/(m1max-m1sta))*1023;
			   OCR1B=((a-m2sta)/(m2max-m2sta))*1023;
			   PORTC|=(1<<PC2)|(1<<PC4);
			   
		   }
		   else if ((a<325)&&(a>290))
 328:	ae 01       	movw	r20, r28
 32a:	43 52       	subi	r20, 0x23	; 35
 32c:	51 40       	sbci	r21, 0x01	; 1
    {	   
	       ADMUX|=(1<<ADSC);
	       ADMUX|=(1<<PA1);  
       	   int a;
		   a=ADC;
		   while(ADMUX&(1<<ADSC))		   
 32e:	19 c0       	rjmp	.+50     	; 0x362 <main+0xc0>
		   		  
		   
		   		   
		   if ((a>325)&&(a<350))
 330:	88 31       	cpi	r24, 0x18	; 24
 332:	91 05       	cpc	r25, r1
 334:	40 f4       	brcc	.+16     	; 0x346 <main+0xa4>
		   {
		       OCR1A=((a-m1sta)/(m1max-m1sta))*1023;
 336:	3b bd       	out	0x2b, r19	; 43
 338:	2a bd       	out	0x2a, r18	; 42
			   OCR1B=((a-m2sta)/(m2max-m2sta))*1023;
 33a:	39 bd       	out	0x29, r19	; 41
 33c:	28 bd       	out	0x28, r18	; 40
			   PORTC|=(1<<PC2)|(1<<PC4);
 33e:	65 b3       	in	r22, 0x15	; 21
 340:	64 61       	ori	r22, 0x14	; 20
 342:	65 bb       	out	0x15, r22	; 21
 344:	0e c0       	rjmp	.+28     	; 0x362 <main+0xc0>
			   
		   }
		   else if ((a<325)&&(a>290))
 346:	42 32       	cpi	r20, 0x22	; 34
 348:	51 05       	cpc	r21, r1
 34a:	40 f4       	brcc	.+16     	; 0x35c <main+0xba>
		   {
			   OCR1A=((m1sta-a)/(m1sta-m1min))*1023;
 34c:	fb bd       	out	0x2b, r31	; 43
 34e:	ea bd       	out	0x2a, r30	; 42
			   OCR1B=((m2sta-a)/(m2sta-m2min))*1023;
 350:	f9 bd       	out	0x29, r31	; 41
 352:	e8 bd       	out	0x28, r30	; 40
			   PORTC|=(1<<PC3)|(1<<PC5);
 354:	65 b3       	in	r22, 0x15	; 21
 356:	68 62       	ori	r22, 0x28	; 40
 358:	65 bb       	out	0x15, r22	; 21
 35a:	03 c0       	rjmp	.+6      	; 0x362 <main+0xc0>
		   }	   
		   
		   
		   else 
		   {
			   PORTC|=(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5);
 35c:	65 b3       	in	r22, 0x15	; 21
 35e:	6c 63       	ori	r22, 0x3C	; 60
 360:	65 bb       	out	0x15, r22	; 21
    {	   
	       ADMUX|=(1<<ADSC);
	       ADMUX|=(1<<PA1);  
       	   int a;
		   a=ADC;
		   while(ADMUX&(1<<ADSC))		   
 362:	3e 99       	sbic	0x07, 6	; 7
 364:	e5 cf       	rjmp	.-54     	; 0x330 <main+0x8e>
		   
		   else 
		   {
			   PORTC|=(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5);
		   }			   
		   print_integer(a);
 366:	ce 01       	movw	r24, r28
 368:	0e 94 09 01 	call	0x212	; 0x212 <print_integer>
		   clear_display();
 36c:	0e 94 a1 00 	call	0x142	; 0x142 <clear_display>
		   cursor_home();
 370:	0e 94 a5 00 	call	0x14a	; 0x14a <cursor_home>
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	91 ee       	ldi	r25, 0xE1	; 225
 378:	a4 e0       	ldi	r26, 0x04	; 4
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	a0 40       	sbci	r26, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0xd8>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0xe2>
 384:	00 00       	nop
 386:	af cf       	rjmp	.-162    	; 0x2e6 <main+0x44>

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	09 2e       	mov	r0, r25
 38c:	07 26       	eor	r0, r23
 38e:	0a d0       	rcall	.+20     	; 0x3a4 <__divmodhi4_neg1>
 390:	77 fd       	sbrc	r23, 7
 392:	04 d0       	rcall	.+8      	; 0x39c <__divmodhi4_neg2>
 394:	0c d0       	rcall	.+24     	; 0x3ae <__udivmodhi4>
 396:	06 d0       	rcall	.+12     	; 0x3a4 <__divmodhi4_neg1>
 398:	00 20       	and	r0, r0
 39a:	1a f4       	brpl	.+6      	; 0x3a2 <__divmodhi4_exit>

0000039c <__divmodhi4_neg2>:
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255

000003a2 <__divmodhi4_exit>:
 3a2:	08 95       	ret

000003a4 <__divmodhi4_neg1>:
 3a4:	f6 f7       	brtc	.-4      	; 0x3a2 <__divmodhi4_exit>
 3a6:	90 95       	com	r25
 3a8:	81 95       	neg	r24
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	08 95       	ret

000003ae <__udivmodhi4>:
 3ae:	aa 1b       	sub	r26, r26
 3b0:	bb 1b       	sub	r27, r27
 3b2:	51 e1       	ldi	r21, 0x11	; 17
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__udivmodhi4_ep>

000003b6 <__udivmodhi4_loop>:
 3b6:	aa 1f       	adc	r26, r26
 3b8:	bb 1f       	adc	r27, r27
 3ba:	a6 17       	cp	r26, r22
 3bc:	b7 07       	cpc	r27, r23
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <__udivmodhi4_ep>
 3c0:	a6 1b       	sub	r26, r22
 3c2:	b7 0b       	sbc	r27, r23

000003c4 <__udivmodhi4_ep>:
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	5a 95       	dec	r21
 3ca:	a9 f7       	brne	.-22     	; 0x3b6 <__udivmodhi4_loop>
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	bc 01       	movw	r22, r24
 3d2:	cd 01       	movw	r24, r26
 3d4:	08 95       	ret

000003d6 <sprintf>:
 3d6:	ae e0       	ldi	r26, 0x0E	; 14
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e1 ef       	ldi	r30, 0xF1	; 241
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	0c 94 99 04 	jmp	0x932	; 0x932 <__prologue_saves__+0x1c>
 3e2:	0d 89       	ldd	r16, Y+21	; 0x15
 3e4:	1e 89       	ldd	r17, Y+22	; 0x16
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	8c 83       	std	Y+4, r24	; 0x04
 3ea:	1a 83       	std	Y+2, r17	; 0x02
 3ec:	09 83       	std	Y+1, r16	; 0x01
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	9f e7       	ldi	r25, 0x7F	; 127
 3f2:	9e 83       	std	Y+6, r25	; 0x06
 3f4:	8d 83       	std	Y+5, r24	; 0x05
 3f6:	ae 01       	movw	r20, r28
 3f8:	47 5e       	subi	r20, 0xE7	; 231
 3fa:	5f 4f       	sbci	r21, 0xFF	; 255
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	6f 89       	ldd	r22, Y+23	; 0x17
 402:	78 8d       	ldd	r23, Y+24	; 0x18
 404:	0e 94 0d 02 	call	0x41a	; 0x41a <vfprintf>
 408:	ef 81       	ldd	r30, Y+7	; 0x07
 40a:	f8 85       	ldd	r31, Y+8	; 0x08
 40c:	e0 0f       	add	r30, r16
 40e:	f1 1f       	adc	r31, r17
 410:	10 82       	st	Z, r1
 412:	2e 96       	adiw	r28, 0x0e	; 14
 414:	e4 e0       	ldi	r30, 0x04	; 4
 416:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__epilogue_restores__+0x1c>

0000041a <vfprintf>:
 41a:	ad e0       	ldi	r26, 0x0D	; 13
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e3 e1       	ldi	r30, 0x13	; 19
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	0c 94 8b 04 	jmp	0x916	; 0x916 <__prologue_saves__>
 426:	3c 01       	movw	r6, r24
 428:	7d 87       	std	Y+13, r23	; 0x0d
 42a:	6c 87       	std	Y+12, r22	; 0x0c
 42c:	5a 01       	movw	r10, r20
 42e:	fc 01       	movw	r30, r24
 430:	17 82       	std	Z+7, r1	; 0x07
 432:	16 82       	std	Z+6, r1	; 0x06
 434:	83 81       	ldd	r24, Z+3	; 0x03
 436:	81 ff       	sbrs	r24, 1
 438:	c8 c1       	rjmp	.+912    	; 0x7ca <__stack+0x36b>
 43a:	2e 01       	movw	r4, r28
 43c:	08 94       	sec
 43e:	41 1c       	adc	r4, r1
 440:	51 1c       	adc	r5, r1
 442:	f3 01       	movw	r30, r6
 444:	93 81       	ldd	r25, Z+3	; 0x03
 446:	ec 85       	ldd	r30, Y+12	; 0x0c
 448:	fd 85       	ldd	r31, Y+13	; 0x0d
 44a:	93 fd       	sbrc	r25, 3
 44c:	85 91       	lpm	r24, Z+
 44e:	93 ff       	sbrs	r25, 3
 450:	81 91       	ld	r24, Z+
 452:	fd 87       	std	Y+13, r31	; 0x0d
 454:	ec 87       	std	Y+12, r30	; 0x0c
 456:	88 23       	and	r24, r24
 458:	09 f4       	brne	.+2      	; 0x45c <vfprintf+0x42>
 45a:	b3 c1       	rjmp	.+870    	; 0x7c2 <__stack+0x363>
 45c:	85 32       	cpi	r24, 0x25	; 37
 45e:	41 f4       	brne	.+16     	; 0x470 <__stack+0x11>
 460:	93 fd       	sbrc	r25, 3
 462:	85 91       	lpm	r24, Z+
 464:	93 ff       	sbrs	r25, 3
 466:	81 91       	ld	r24, Z+
 468:	fd 87       	std	Y+13, r31	; 0x0d
 46a:	ec 87       	std	Y+12, r30	; 0x0c
 46c:	85 32       	cpi	r24, 0x25	; 37
 46e:	29 f4       	brne	.+10     	; 0x47a <__stack+0x1b>
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	b3 01       	movw	r22, r6
 474:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 478:	e4 cf       	rjmp	.-56     	; 0x442 <vfprintf+0x28>
 47a:	ff 24       	eor	r15, r15
 47c:	ee 24       	eor	r14, r14
 47e:	10 e0       	ldi	r17, 0x00	; 0
 480:	10 32       	cpi	r17, 0x20	; 32
 482:	b0 f4       	brcc	.+44     	; 0x4b0 <__stack+0x51>
 484:	8b 32       	cpi	r24, 0x2B	; 43
 486:	69 f0       	breq	.+26     	; 0x4a2 <__stack+0x43>
 488:	8c 32       	cpi	r24, 0x2C	; 44
 48a:	28 f4       	brcc	.+10     	; 0x496 <__stack+0x37>
 48c:	80 32       	cpi	r24, 0x20	; 32
 48e:	51 f0       	breq	.+20     	; 0x4a4 <__stack+0x45>
 490:	83 32       	cpi	r24, 0x23	; 35
 492:	71 f4       	brne	.+28     	; 0x4b0 <__stack+0x51>
 494:	0b c0       	rjmp	.+22     	; 0x4ac <__stack+0x4d>
 496:	8d 32       	cpi	r24, 0x2D	; 45
 498:	39 f0       	breq	.+14     	; 0x4a8 <__stack+0x49>
 49a:	80 33       	cpi	r24, 0x30	; 48
 49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
 49e:	11 60       	ori	r17, 0x01	; 1
 4a0:	2c c0       	rjmp	.+88     	; 0x4fa <__stack+0x9b>
 4a2:	12 60       	ori	r17, 0x02	; 2
 4a4:	14 60       	ori	r17, 0x04	; 4
 4a6:	29 c0       	rjmp	.+82     	; 0x4fa <__stack+0x9b>
 4a8:	18 60       	ori	r17, 0x08	; 8
 4aa:	27 c0       	rjmp	.+78     	; 0x4fa <__stack+0x9b>
 4ac:	10 61       	ori	r17, 0x10	; 16
 4ae:	25 c0       	rjmp	.+74     	; 0x4fa <__stack+0x9b>
 4b0:	17 fd       	sbrc	r17, 7
 4b2:	2e c0       	rjmp	.+92     	; 0x510 <__stack+0xb1>
 4b4:	28 2f       	mov	r18, r24
 4b6:	20 53       	subi	r18, 0x30	; 48
 4b8:	2a 30       	cpi	r18, 0x0A	; 10
 4ba:	98 f4       	brcc	.+38     	; 0x4e2 <__stack+0x83>
 4bc:	16 ff       	sbrs	r17, 6
 4be:	08 c0       	rjmp	.+16     	; 0x4d0 <__stack+0x71>
 4c0:	8f 2d       	mov	r24, r15
 4c2:	88 0f       	add	r24, r24
 4c4:	f8 2e       	mov	r15, r24
 4c6:	ff 0c       	add	r15, r15
 4c8:	ff 0c       	add	r15, r15
 4ca:	f8 0e       	add	r15, r24
 4cc:	f2 0e       	add	r15, r18
 4ce:	15 c0       	rjmp	.+42     	; 0x4fa <__stack+0x9b>
 4d0:	8e 2d       	mov	r24, r14
 4d2:	88 0f       	add	r24, r24
 4d4:	e8 2e       	mov	r14, r24
 4d6:	ee 0c       	add	r14, r14
 4d8:	ee 0c       	add	r14, r14
 4da:	e8 0e       	add	r14, r24
 4dc:	e2 0e       	add	r14, r18
 4de:	10 62       	ori	r17, 0x20	; 32
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <__stack+0x9b>
 4e2:	8e 32       	cpi	r24, 0x2E	; 46
 4e4:	21 f4       	brne	.+8      	; 0x4ee <__stack+0x8f>
 4e6:	16 fd       	sbrc	r17, 6
 4e8:	6c c1       	rjmp	.+728    	; 0x7c2 <__stack+0x363>
 4ea:	10 64       	ori	r17, 0x40	; 64
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__stack+0x9b>
 4ee:	8c 36       	cpi	r24, 0x6C	; 108
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__stack+0x97>
 4f2:	10 68       	ori	r17, 0x80	; 128
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__stack+0x9b>
 4f6:	88 36       	cpi	r24, 0x68	; 104
 4f8:	59 f4       	brne	.+22     	; 0x510 <__stack+0xb1>
 4fa:	ec 85       	ldd	r30, Y+12	; 0x0c
 4fc:	fd 85       	ldd	r31, Y+13	; 0x0d
 4fe:	93 fd       	sbrc	r25, 3
 500:	85 91       	lpm	r24, Z+
 502:	93 ff       	sbrs	r25, 3
 504:	81 91       	ld	r24, Z+
 506:	fd 87       	std	Y+13, r31	; 0x0d
 508:	ec 87       	std	Y+12, r30	; 0x0c
 50a:	88 23       	and	r24, r24
 50c:	09 f0       	breq	.+2      	; 0x510 <__stack+0xb1>
 50e:	b8 cf       	rjmp	.-144    	; 0x480 <__stack+0x21>
 510:	98 2f       	mov	r25, r24
 512:	95 54       	subi	r25, 0x45	; 69
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	18 f0       	brcs	.+6      	; 0x51e <__stack+0xbf>
 518:	90 52       	subi	r25, 0x20	; 32
 51a:	93 30       	cpi	r25, 0x03	; 3
 51c:	38 f4       	brcc	.+14     	; 0x52c <__stack+0xcd>
 51e:	24 e0       	ldi	r18, 0x04	; 4
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	a2 0e       	add	r10, r18
 524:	b3 1e       	adc	r11, r19
 526:	3f e3       	ldi	r19, 0x3F	; 63
 528:	39 83       	std	Y+1, r19	; 0x01
 52a:	0f c0       	rjmp	.+30     	; 0x54a <__stack+0xeb>
 52c:	83 36       	cpi	r24, 0x63	; 99
 52e:	31 f0       	breq	.+12     	; 0x53c <__stack+0xdd>
 530:	83 37       	cpi	r24, 0x73	; 115
 532:	81 f0       	breq	.+32     	; 0x554 <__stack+0xf5>
 534:	83 35       	cpi	r24, 0x53	; 83
 536:	09 f0       	breq	.+2      	; 0x53a <__stack+0xdb>
 538:	5a c0       	rjmp	.+180    	; 0x5ee <__stack+0x18f>
 53a:	22 c0       	rjmp	.+68     	; 0x580 <__stack+0x121>
 53c:	f5 01       	movw	r30, r10
 53e:	80 81       	ld	r24, Z
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	22 e0       	ldi	r18, 0x02	; 2
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	a2 0e       	add	r10, r18
 548:	b3 1e       	adc	r11, r19
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	c2 2e       	mov	r12, r18
 54e:	d1 2c       	mov	r13, r1
 550:	42 01       	movw	r8, r4
 552:	14 c0       	rjmp	.+40     	; 0x57c <__stack+0x11d>
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	29 2e       	mov	r2, r25
 558:	31 2c       	mov	r3, r1
 55a:	2a 0c       	add	r2, r10
 55c:	3b 1c       	adc	r3, r11
 55e:	f5 01       	movw	r30, r10
 560:	80 80       	ld	r8, Z
 562:	91 80       	ldd	r9, Z+1	; 0x01
 564:	16 ff       	sbrs	r17, 6
 566:	03 c0       	rjmp	.+6      	; 0x56e <__stack+0x10f>
 568:	6f 2d       	mov	r22, r15
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x113>
 56e:	6f ef       	ldi	r22, 0xFF	; 255
 570:	7f ef       	ldi	r23, 0xFF	; 255
 572:	c4 01       	movw	r24, r8
 574:	0e 94 f6 03 	call	0x7ec	; 0x7ec <strnlen>
 578:	6c 01       	movw	r12, r24
 57a:	51 01       	movw	r10, r2
 57c:	1f 77       	andi	r17, 0x7F	; 127
 57e:	15 c0       	rjmp	.+42     	; 0x5aa <__stack+0x14b>
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	28 2e       	mov	r2, r24
 584:	31 2c       	mov	r3, r1
 586:	2a 0c       	add	r2, r10
 588:	3b 1c       	adc	r3, r11
 58a:	f5 01       	movw	r30, r10
 58c:	80 80       	ld	r8, Z
 58e:	91 80       	ldd	r9, Z+1	; 0x01
 590:	16 ff       	sbrs	r17, 6
 592:	03 c0       	rjmp	.+6      	; 0x59a <__stack+0x13b>
 594:	6f 2d       	mov	r22, r15
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <__stack+0x13f>
 59a:	6f ef       	ldi	r22, 0xFF	; 255
 59c:	7f ef       	ldi	r23, 0xFF	; 255
 59e:	c4 01       	movw	r24, r8
 5a0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <strnlen_P>
 5a4:	6c 01       	movw	r12, r24
 5a6:	10 68       	ori	r17, 0x80	; 128
 5a8:	51 01       	movw	r10, r2
 5aa:	13 fd       	sbrc	r17, 3
 5ac:	1c c0       	rjmp	.+56     	; 0x5e6 <__stack+0x187>
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <__stack+0x15d>
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	b3 01       	movw	r22, r6
 5b6:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 5ba:	ea 94       	dec	r14
 5bc:	8e 2d       	mov	r24, r14
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	c8 16       	cp	r12, r24
 5c2:	d9 06       	cpc	r13, r25
 5c4:	a8 f3       	brcs	.-22     	; 0x5b0 <__stack+0x151>
 5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <__stack+0x187>
 5c8:	f4 01       	movw	r30, r8
 5ca:	17 fd       	sbrc	r17, 7
 5cc:	85 91       	lpm	r24, Z+
 5ce:	17 ff       	sbrs	r17, 7
 5d0:	81 91       	ld	r24, Z+
 5d2:	4f 01       	movw	r8, r30
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	b3 01       	movw	r22, r6
 5d8:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 5dc:	e1 10       	cpse	r14, r1
 5de:	ea 94       	dec	r14
 5e0:	08 94       	sec
 5e2:	c1 08       	sbc	r12, r1
 5e4:	d1 08       	sbc	r13, r1
 5e6:	c1 14       	cp	r12, r1
 5e8:	d1 04       	cpc	r13, r1
 5ea:	71 f7       	brne	.-36     	; 0x5c8 <__stack+0x169>
 5ec:	e7 c0       	rjmp	.+462    	; 0x7bc <__stack+0x35d>
 5ee:	84 36       	cpi	r24, 0x64	; 100
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <__stack+0x197>
 5f2:	89 36       	cpi	r24, 0x69	; 105
 5f4:	51 f5       	brne	.+84     	; 0x64a <__stack+0x1eb>
 5f6:	f5 01       	movw	r30, r10
 5f8:	17 ff       	sbrs	r17, 7
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <__stack+0x1ab>
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	a2 81       	ldd	r26, Z+2	; 0x02
 602:	b3 81       	ldd	r27, Z+3	; 0x03
 604:	24 e0       	ldi	r18, 0x04	; 4
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	08 c0       	rjmp	.+16     	; 0x61a <__stack+0x1bb>
 60a:	80 81       	ld	r24, Z
 60c:	91 81       	ldd	r25, Z+1	; 0x01
 60e:	aa 27       	eor	r26, r26
 610:	97 fd       	sbrc	r25, 7
 612:	a0 95       	com	r26
 614:	ba 2f       	mov	r27, r26
 616:	22 e0       	ldi	r18, 0x02	; 2
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	a2 0e       	add	r10, r18
 61c:	b3 1e       	adc	r11, r19
 61e:	01 2f       	mov	r16, r17
 620:	0f 76       	andi	r16, 0x6F	; 111
 622:	b7 ff       	sbrs	r27, 7
 624:	08 c0       	rjmp	.+16     	; 0x636 <__stack+0x1d7>
 626:	b0 95       	com	r27
 628:	a0 95       	com	r26
 62a:	90 95       	com	r25
 62c:	81 95       	neg	r24
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	af 4f       	sbci	r26, 0xFF	; 255
 632:	bf 4f       	sbci	r27, 0xFF	; 255
 634:	00 68       	ori	r16, 0x80	; 128
 636:	bc 01       	movw	r22, r24
 638:	cd 01       	movw	r24, r26
 63a:	a2 01       	movw	r20, r4
 63c:	2a e0       	ldi	r18, 0x0A	; 10
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	0e 94 2d 04 	call	0x85a	; 0x85a <__ultoa_invert>
 644:	d8 2e       	mov	r13, r24
 646:	d4 18       	sub	r13, r4
 648:	3f c0       	rjmp	.+126    	; 0x6c8 <__stack+0x269>
 64a:	85 37       	cpi	r24, 0x75	; 117
 64c:	21 f4       	brne	.+8      	; 0x656 <__stack+0x1f7>
 64e:	1f 7e       	andi	r17, 0xEF	; 239
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	20 c0       	rjmp	.+64     	; 0x696 <__stack+0x237>
 656:	19 7f       	andi	r17, 0xF9	; 249
 658:	8f 36       	cpi	r24, 0x6F	; 111
 65a:	a9 f0       	breq	.+42     	; 0x686 <__stack+0x227>
 65c:	80 37       	cpi	r24, 0x70	; 112
 65e:	20 f4       	brcc	.+8      	; 0x668 <__stack+0x209>
 660:	88 35       	cpi	r24, 0x58	; 88
 662:	09 f0       	breq	.+2      	; 0x666 <__stack+0x207>
 664:	ae c0       	rjmp	.+348    	; 0x7c2 <__stack+0x363>
 666:	0b c0       	rjmp	.+22     	; 0x67e <__stack+0x21f>
 668:	80 37       	cpi	r24, 0x70	; 112
 66a:	21 f0       	breq	.+8      	; 0x674 <__stack+0x215>
 66c:	88 37       	cpi	r24, 0x78	; 120
 66e:	09 f0       	breq	.+2      	; 0x672 <__stack+0x213>
 670:	a8 c0       	rjmp	.+336    	; 0x7c2 <__stack+0x363>
 672:	01 c0       	rjmp	.+2      	; 0x676 <__stack+0x217>
 674:	10 61       	ori	r17, 0x10	; 16
 676:	14 ff       	sbrs	r17, 4
 678:	09 c0       	rjmp	.+18     	; 0x68c <__stack+0x22d>
 67a:	14 60       	ori	r17, 0x04	; 4
 67c:	07 c0       	rjmp	.+14     	; 0x68c <__stack+0x22d>
 67e:	14 ff       	sbrs	r17, 4
 680:	08 c0       	rjmp	.+16     	; 0x692 <__stack+0x233>
 682:	16 60       	ori	r17, 0x06	; 6
 684:	06 c0       	rjmp	.+12     	; 0x692 <__stack+0x233>
 686:	28 e0       	ldi	r18, 0x08	; 8
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	05 c0       	rjmp	.+10     	; 0x696 <__stack+0x237>
 68c:	20 e1       	ldi	r18, 0x10	; 16
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <__stack+0x237>
 692:	20 e1       	ldi	r18, 0x10	; 16
 694:	32 e0       	ldi	r19, 0x02	; 2
 696:	f5 01       	movw	r30, r10
 698:	17 ff       	sbrs	r17, 7
 69a:	07 c0       	rjmp	.+14     	; 0x6aa <__stack+0x24b>
 69c:	60 81       	ld	r22, Z
 69e:	71 81       	ldd	r23, Z+1	; 0x01
 6a0:	82 81       	ldd	r24, Z+2	; 0x02
 6a2:	93 81       	ldd	r25, Z+3	; 0x03
 6a4:	44 e0       	ldi	r20, 0x04	; 4
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <__stack+0x257>
 6aa:	60 81       	ld	r22, Z
 6ac:	71 81       	ldd	r23, Z+1	; 0x01
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	42 e0       	ldi	r20, 0x02	; 2
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	a4 0e       	add	r10, r20
 6b8:	b5 1e       	adc	r11, r21
 6ba:	a2 01       	movw	r20, r4
 6bc:	0e 94 2d 04 	call	0x85a	; 0x85a <__ultoa_invert>
 6c0:	d8 2e       	mov	r13, r24
 6c2:	d4 18       	sub	r13, r4
 6c4:	01 2f       	mov	r16, r17
 6c6:	0f 77       	andi	r16, 0x7F	; 127
 6c8:	06 ff       	sbrs	r16, 6
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <__stack+0x27f>
 6cc:	0e 7f       	andi	r16, 0xFE	; 254
 6ce:	df 14       	cp	r13, r15
 6d0:	30 f4       	brcc	.+12     	; 0x6de <__stack+0x27f>
 6d2:	04 ff       	sbrs	r16, 4
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <__stack+0x283>
 6d6:	02 fd       	sbrc	r16, 2
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__stack+0x283>
 6da:	0f 7e       	andi	r16, 0xEF	; 239
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <__stack+0x283>
 6de:	1d 2d       	mov	r17, r13
 6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <__stack+0x285>
 6e2:	1f 2d       	mov	r17, r15
 6e4:	80 2f       	mov	r24, r16
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	04 ff       	sbrs	r16, 4
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <__stack+0x2a5>
 6ec:	fe 01       	movw	r30, r28
 6ee:	ed 0d       	add	r30, r13
 6f0:	f1 1d       	adc	r31, r1
 6f2:	20 81       	ld	r18, Z
 6f4:	20 33       	cpi	r18, 0x30	; 48
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__stack+0x29d>
 6f8:	09 7e       	andi	r16, 0xE9	; 233
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <__stack+0x2af>
 6fc:	02 ff       	sbrs	r16, 2
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <__stack+0x2ad>
 700:	1e 5f       	subi	r17, 0xFE	; 254
 702:	05 c0       	rjmp	.+10     	; 0x70e <__stack+0x2af>
 704:	86 78       	andi	r24, 0x86	; 134
 706:	90 70       	andi	r25, 0x00	; 0
 708:	00 97       	sbiw	r24, 0x00	; 0
 70a:	09 f0       	breq	.+2      	; 0x70e <__stack+0x2af>
 70c:	1f 5f       	subi	r17, 0xFF	; 255
 70e:	80 2e       	mov	r8, r16
 710:	99 24       	eor	r9, r9
 712:	03 fd       	sbrc	r16, 3
 714:	12 c0       	rjmp	.+36     	; 0x73a <__stack+0x2db>
 716:	00 ff       	sbrs	r16, 0
 718:	0d c0       	rjmp	.+26     	; 0x734 <__stack+0x2d5>
 71a:	fd 2c       	mov	r15, r13
 71c:	1e 15       	cp	r17, r14
 71e:	50 f4       	brcc	.+20     	; 0x734 <__stack+0x2d5>
 720:	fe 0c       	add	r15, r14
 722:	f1 1a       	sub	r15, r17
 724:	1e 2d       	mov	r17, r14
 726:	06 c0       	rjmp	.+12     	; 0x734 <__stack+0x2d5>
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	b3 01       	movw	r22, r6
 72e:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 732:	1f 5f       	subi	r17, 0xFF	; 255
 734:	1e 15       	cp	r17, r14
 736:	c0 f3       	brcs	.-16     	; 0x728 <__stack+0x2c9>
 738:	04 c0       	rjmp	.+8      	; 0x742 <__stack+0x2e3>
 73a:	1e 15       	cp	r17, r14
 73c:	10 f4       	brcc	.+4      	; 0x742 <__stack+0x2e3>
 73e:	e1 1a       	sub	r14, r17
 740:	01 c0       	rjmp	.+2      	; 0x744 <__stack+0x2e5>
 742:	ee 24       	eor	r14, r14
 744:	84 fe       	sbrs	r8, 4
 746:	0f c0       	rjmp	.+30     	; 0x766 <__stack+0x307>
 748:	80 e3       	ldi	r24, 0x30	; 48
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	b3 01       	movw	r22, r6
 74e:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 752:	82 fe       	sbrs	r8, 2
 754:	1f c0       	rjmp	.+62     	; 0x794 <__stack+0x335>
 756:	81 fe       	sbrs	r8, 1
 758:	03 c0       	rjmp	.+6      	; 0x760 <__stack+0x301>
 75a:	88 e5       	ldi	r24, 0x58	; 88
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	10 c0       	rjmp	.+32     	; 0x780 <__stack+0x321>
 760:	88 e7       	ldi	r24, 0x78	; 120
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0d c0       	rjmp	.+26     	; 0x780 <__stack+0x321>
 766:	c4 01       	movw	r24, r8
 768:	86 78       	andi	r24, 0x86	; 134
 76a:	90 70       	andi	r25, 0x00	; 0
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	91 f0       	breq	.+36     	; 0x794 <__stack+0x335>
 770:	81 fc       	sbrc	r8, 1
 772:	02 c0       	rjmp	.+4      	; 0x778 <__stack+0x319>
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	01 c0       	rjmp	.+2      	; 0x77a <__stack+0x31b>
 778:	8b e2       	ldi	r24, 0x2B	; 43
 77a:	07 fd       	sbrc	r16, 7
 77c:	8d e2       	ldi	r24, 0x2D	; 45
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	b3 01       	movw	r22, r6
 782:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 786:	06 c0       	rjmp	.+12     	; 0x794 <__stack+0x335>
 788:	80 e3       	ldi	r24, 0x30	; 48
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	b3 01       	movw	r22, r6
 78e:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 792:	fa 94       	dec	r15
 794:	df 14       	cp	r13, r15
 796:	c0 f3       	brcs	.-16     	; 0x788 <__stack+0x329>
 798:	da 94       	dec	r13
 79a:	f2 01       	movw	r30, r4
 79c:	ed 0d       	add	r30, r13
 79e:	f1 1d       	adc	r31, r1
 7a0:	80 81       	ld	r24, Z
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	b3 01       	movw	r22, r6
 7a6:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 7aa:	dd 20       	and	r13, r13
 7ac:	a9 f7       	brne	.-22     	; 0x798 <__stack+0x339>
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <__stack+0x35d>
 7b0:	80 e2       	ldi	r24, 0x20	; 32
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	b3 01       	movw	r22, r6
 7b6:	0e 94 01 04 	call	0x802	; 0x802 <fputc>
 7ba:	ea 94       	dec	r14
 7bc:	ee 20       	and	r14, r14
 7be:	c1 f7       	brne	.-16     	; 0x7b0 <__stack+0x351>
 7c0:	40 ce       	rjmp	.-896    	; 0x442 <vfprintf+0x28>
 7c2:	f3 01       	movw	r30, r6
 7c4:	86 81       	ldd	r24, Z+6	; 0x06
 7c6:	97 81       	ldd	r25, Z+7	; 0x07
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <__stack+0x36f>
 7ca:	8f ef       	ldi	r24, 0xFF	; 255
 7cc:	9f ef       	ldi	r25, 0xFF	; 255
 7ce:	2d 96       	adiw	r28, 0x0d	; 13
 7d0:	e2 e1       	ldi	r30, 0x12	; 18
 7d2:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__epilogue_restores__>

000007d6 <strnlen_P>:
 7d6:	fc 01       	movw	r30, r24
 7d8:	05 90       	lpm	r0, Z+
 7da:	61 50       	subi	r22, 0x01	; 1
 7dc:	70 40       	sbci	r23, 0x00	; 0
 7de:	01 10       	cpse	r0, r1
 7e0:	d8 f7       	brcc	.-10     	; 0x7d8 <strnlen_P+0x2>
 7e2:	80 95       	com	r24
 7e4:	90 95       	com	r25
 7e6:	8e 0f       	add	r24, r30
 7e8:	9f 1f       	adc	r25, r31
 7ea:	08 95       	ret

000007ec <strnlen>:
 7ec:	fc 01       	movw	r30, r24
 7ee:	61 50       	subi	r22, 0x01	; 1
 7f0:	70 40       	sbci	r23, 0x00	; 0
 7f2:	01 90       	ld	r0, Z+
 7f4:	01 10       	cpse	r0, r1
 7f6:	d8 f7       	brcc	.-10     	; 0x7ee <strnlen+0x2>
 7f8:	80 95       	com	r24
 7fa:	90 95       	com	r25
 7fc:	8e 0f       	add	r24, r30
 7fe:	9f 1f       	adc	r25, r31
 800:	08 95       	ret

00000802 <fputc>:
 802:	0f 93       	push	r16
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	8c 01       	movw	r16, r24
 80c:	eb 01       	movw	r28, r22
 80e:	8b 81       	ldd	r24, Y+3	; 0x03
 810:	81 ff       	sbrs	r24, 1
 812:	1b c0       	rjmp	.+54     	; 0x84a <fputc+0x48>
 814:	82 ff       	sbrs	r24, 2
 816:	0d c0       	rjmp	.+26     	; 0x832 <fputc+0x30>
 818:	2e 81       	ldd	r18, Y+6	; 0x06
 81a:	3f 81       	ldd	r19, Y+7	; 0x07
 81c:	8c 81       	ldd	r24, Y+4	; 0x04
 81e:	9d 81       	ldd	r25, Y+5	; 0x05
 820:	28 17       	cp	r18, r24
 822:	39 07       	cpc	r19, r25
 824:	64 f4       	brge	.+24     	; 0x83e <fputc+0x3c>
 826:	e8 81       	ld	r30, Y
 828:	f9 81       	ldd	r31, Y+1	; 0x01
 82a:	01 93       	st	Z+, r16
 82c:	f9 83       	std	Y+1, r31	; 0x01
 82e:	e8 83       	st	Y, r30
 830:	06 c0       	rjmp	.+12     	; 0x83e <fputc+0x3c>
 832:	e8 85       	ldd	r30, Y+8	; 0x08
 834:	f9 85       	ldd	r31, Y+9	; 0x09
 836:	80 2f       	mov	r24, r16
 838:	09 95       	icall
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	31 f4       	brne	.+12     	; 0x84a <fputc+0x48>
 83e:	8e 81       	ldd	r24, Y+6	; 0x06
 840:	9f 81       	ldd	r25, Y+7	; 0x07
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	9f 83       	std	Y+7, r25	; 0x07
 846:	8e 83       	std	Y+6, r24	; 0x06
 848:	02 c0       	rjmp	.+4      	; 0x84e <fputc+0x4c>
 84a:	0f ef       	ldi	r16, 0xFF	; 255
 84c:	1f ef       	ldi	r17, 0xFF	; 255
 84e:	c8 01       	movw	r24, r16
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	08 95       	ret

0000085a <__ultoa_invert>:
 85a:	fa 01       	movw	r30, r20
 85c:	aa 27       	eor	r26, r26
 85e:	28 30       	cpi	r18, 0x08	; 8
 860:	51 f1       	breq	.+84     	; 0x8b6 <__ultoa_invert+0x5c>
 862:	20 31       	cpi	r18, 0x10	; 16
 864:	81 f1       	breq	.+96     	; 0x8c6 <__ultoa_invert+0x6c>
 866:	e8 94       	clt
 868:	6f 93       	push	r22
 86a:	6e 7f       	andi	r22, 0xFE	; 254
 86c:	6e 5f       	subi	r22, 0xFE	; 254
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	af 4f       	sbci	r26, 0xFF	; 255
 876:	b1 e0       	ldi	r27, 0x01	; 1
 878:	3e d0       	rcall	.+124    	; 0x8f6 <__ultoa_invert+0x9c>
 87a:	b4 e0       	ldi	r27, 0x04	; 4
 87c:	3c d0       	rcall	.+120    	; 0x8f6 <__ultoa_invert+0x9c>
 87e:	67 0f       	add	r22, r23
 880:	78 1f       	adc	r23, r24
 882:	89 1f       	adc	r24, r25
 884:	9a 1f       	adc	r25, r26
 886:	a1 1d       	adc	r26, r1
 888:	68 0f       	add	r22, r24
 88a:	79 1f       	adc	r23, r25
 88c:	8a 1f       	adc	r24, r26
 88e:	91 1d       	adc	r25, r1
 890:	a1 1d       	adc	r26, r1
 892:	6a 0f       	add	r22, r26
 894:	71 1d       	adc	r23, r1
 896:	81 1d       	adc	r24, r1
 898:	91 1d       	adc	r25, r1
 89a:	a1 1d       	adc	r26, r1
 89c:	20 d0       	rcall	.+64     	; 0x8de <__ultoa_invert+0x84>
 89e:	09 f4       	brne	.+2      	; 0x8a2 <__ultoa_invert+0x48>
 8a0:	68 94       	set
 8a2:	3f 91       	pop	r19
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	26 9f       	mul	r18, r22
 8a8:	11 24       	eor	r1, r1
 8aa:	30 19       	sub	r19, r0
 8ac:	30 5d       	subi	r19, 0xD0	; 208
 8ae:	31 93       	st	Z+, r19
 8b0:	de f6       	brtc	.-74     	; 0x868 <__ultoa_invert+0xe>
 8b2:	cf 01       	movw	r24, r30
 8b4:	08 95       	ret
 8b6:	46 2f       	mov	r20, r22
 8b8:	47 70       	andi	r20, 0x07	; 7
 8ba:	40 5d       	subi	r20, 0xD0	; 208
 8bc:	41 93       	st	Z+, r20
 8be:	b3 e0       	ldi	r27, 0x03	; 3
 8c0:	0f d0       	rcall	.+30     	; 0x8e0 <__ultoa_invert+0x86>
 8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__ultoa_invert+0x5c>
 8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <__ultoa_invert+0x58>
 8c6:	46 2f       	mov	r20, r22
 8c8:	4f 70       	andi	r20, 0x0F	; 15
 8ca:	40 5d       	subi	r20, 0xD0	; 208
 8cc:	4a 33       	cpi	r20, 0x3A	; 58
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <__ultoa_invert+0x7c>
 8d0:	49 5d       	subi	r20, 0xD9	; 217
 8d2:	31 fd       	sbrc	r19, 1
 8d4:	40 52       	subi	r20, 0x20	; 32
 8d6:	41 93       	st	Z+, r20
 8d8:	02 d0       	rcall	.+4      	; 0x8de <__ultoa_invert+0x84>
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__ultoa_invert+0x6c>
 8dc:	ea cf       	rjmp	.-44     	; 0x8b2 <__ultoa_invert+0x58>
 8de:	b4 e0       	ldi	r27, 0x04	; 4
 8e0:	a6 95       	lsr	r26
 8e2:	97 95       	ror	r25
 8e4:	87 95       	ror	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	ba 95       	dec	r27
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__ultoa_invert+0x86>
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	61 05       	cpc	r22, r1
 8f2:	71 05       	cpc	r23, r1
 8f4:	08 95       	ret
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	0a 2e       	mov	r0, r26
 8fc:	06 94       	lsr	r0
 8fe:	57 95       	ror	r21
 900:	47 95       	ror	r20
 902:	37 95       	ror	r19
 904:	27 95       	ror	r18
 906:	ba 95       	dec	r27
 908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0xa2>
 90a:	62 0f       	add	r22, r18
 90c:	73 1f       	adc	r23, r19
 90e:	84 1f       	adc	r24, r20
 910:	95 1f       	adc	r25, r21
 912:	a0 1d       	adc	r26, r0
 914:	08 95       	ret

00000916 <__prologue_saves__>:
 916:	2f 92       	push	r2
 918:	3f 92       	push	r3
 91a:	4f 92       	push	r4
 91c:	5f 92       	push	r5
 91e:	6f 92       	push	r6
 920:	7f 92       	push	r7
 922:	8f 92       	push	r8
 924:	9f 92       	push	r9
 926:	af 92       	push	r10
 928:	bf 92       	push	r11
 92a:	cf 92       	push	r12
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	ca 1b       	sub	r28, r26
 940:	db 0b       	sbc	r29, r27
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	09 94       	ijmp

0000094e <__epilogue_restores__>:
 94e:	2a 88       	ldd	r2, Y+18	; 0x12
 950:	39 88       	ldd	r3, Y+17	; 0x11
 952:	48 88       	ldd	r4, Y+16	; 0x10
 954:	5f 84       	ldd	r5, Y+15	; 0x0f
 956:	6e 84       	ldd	r6, Y+14	; 0x0e
 958:	7d 84       	ldd	r7, Y+13	; 0x0d
 95a:	8c 84       	ldd	r8, Y+12	; 0x0c
 95c:	9b 84       	ldd	r9, Y+11	; 0x0b
 95e:	aa 84       	ldd	r10, Y+10	; 0x0a
 960:	b9 84       	ldd	r11, Y+9	; 0x09
 962:	c8 84       	ldd	r12, Y+8	; 0x08
 964:	df 80       	ldd	r13, Y+7	; 0x07
 966:	ee 80       	ldd	r14, Y+6	; 0x06
 968:	fd 80       	ldd	r15, Y+5	; 0x05
 96a:	0c 81       	ldd	r16, Y+4	; 0x04
 96c:	1b 81       	ldd	r17, Y+3	; 0x03
 96e:	aa 81       	ldd	r26, Y+2	; 0x02
 970:	b9 81       	ldd	r27, Y+1	; 0x01
 972:	ce 0f       	add	r28, r30
 974:	d1 1d       	adc	r29, r1
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	f8 94       	cli
 97a:	de bf       	out	0x3e, r29	; 62
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	cd bf       	out	0x3d, r28	; 61
 980:	ed 01       	movw	r28, r26
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
