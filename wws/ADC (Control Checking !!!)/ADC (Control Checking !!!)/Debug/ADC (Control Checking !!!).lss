
ADC (Control Checking !!!).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ad  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006b  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d7  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016b  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define setit ~0
#define setit1 0
int main(void)
{
	DDRB = setit;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRA = setit1;
  70:	1a ba       	out	0x1a, r1	; 26
	PORTB = setit1;
  72:	18 ba       	out	0x18, r1	; 24
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  74:	87 e8       	ldi	r24, 0x87	; 135
  76:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS0);
  78:	80 e4       	ldi	r24, 0x40	; 64
  7a:	87 b9       	out	0x07, r24	; 7
		{
			PORTB=(1<<PB0)|(1<<PB0);
		}
		else
		{
			PORTB=(1<<PB0);
  7c:	51 e0       	ldi	r21, 0x01	; 1
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
		}
		else if (a>410)
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2);
  7e:	47 e0       	ldi	r20, 0x07	; 7
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4);
		}
		else if (a>615)
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
  80:	3f e0       	ldi	r19, 0x0F	; 15
		//TODO:: Please write your application code
		ADCSRA |=(1<<ADSC);
		int a = ADC;
		if (a>820)
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4);
  82:	2f e1       	ldi	r18, 0x1F	; 31
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
	ADMUX = (1<<REFS0);
	while(1)
	{
		//TODO:: Please write your application code
		ADCSRA |=(1<<ADSC);
  84:	36 9a       	sbi	0x06, 6	; 6
		int a = ADC;
  86:	84 b1       	in	r24, 0x04	; 4
  88:	95 b1       	in	r25, 0x05	; 5
		if (a>820)
  8a:	85 33       	cpi	r24, 0x35	; 53
  8c:	63 e0       	ldi	r22, 0x03	; 3
  8e:	96 07       	cpc	r25, r22
  90:	14 f0       	brlt	.+4      	; 0x96 <main+0x2a>
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4);
  92:	28 bb       	out	0x18, r18	; 24
  94:	f7 cf       	rjmp	.-18     	; 0x84 <main+0x18>
		}
		else if (a>615)
  96:	88 36       	cpi	r24, 0x68	; 104
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	96 07       	cpc	r25, r22
  9c:	14 f0       	brlt	.+4      	; 0xa2 <main+0x36>
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
  9e:	38 bb       	out	0x18, r19	; 24
  a0:	f1 cf       	rjmp	.-30     	; 0x84 <main+0x18>
		}
		else if (a>410)
  a2:	8b 39       	cpi	r24, 0x9B	; 155
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	96 07       	cpc	r25, r22
  a8:	14 f0       	brlt	.+4      	; 0xae <main+0x42>
		{
			PORTB=(1<<PB0)|(1<<PB1)|(1<<PB2);
  aa:	48 bb       	out	0x18, r20	; 24
  ac:	eb cf       	rjmp	.-42     	; 0x84 <main+0x18>
		}
		else if (a>205)
  ae:	8e 3c       	cpi	r24, 0xCE	; 206
  b0:	91 05       	cpc	r25, r1
  b2:	14 f0       	brlt	.+4      	; 0xb8 <main+0x4c>
		{
			PORTB=(1<<PB0)|(1<<PB0);
  b4:	58 bb       	out	0x18, r21	; 24
  b6:	e6 cf       	rjmp	.-52     	; 0x84 <main+0x18>
		}
		else
		{
			PORTB=(1<<PB0);
  b8:	58 bb       	out	0x18, r21	; 24
  ba:	e4 cf       	rjmp	.-56     	; 0x84 <main+0x18>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
