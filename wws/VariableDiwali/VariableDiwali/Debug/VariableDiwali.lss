
VariableDiwali.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000554  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000142  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000356  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000127  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002f  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8a:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <light1>:
#include <util/delay.h>
#include <avr/interrupt.h>

void light1()
{
	PORTB=0b01010101;
  92:	85 e5       	ldi	r24, 0x55	; 85
  94:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	93 ec       	ldi	r25, 0xC3	; 195
  9a:	a9 e0       	ldi	r26, 0x09	; 9
  9c:	81 50       	subi	r24, 0x01	; 1
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	a0 40       	sbci	r26, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <light1+0xa>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <light1+0x14>
  a6:	00 00       	nop
	_delay_ms(200);
	PORTB=0b10101010;
  a8:	8a ea       	ldi	r24, 0xAA	; 170
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	93 ec       	ldi	r25, 0xC3	; 195
  b0:	a9 e0       	ldi	r26, 0x09	; 9
  b2:	81 50       	subi	r24, 0x01	; 1
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	a0 40       	sbci	r26, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <light1+0x20>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <light1+0x2a>
  bc:	00 00       	nop
	_delay_ms(200);
}
  be:	08 95       	ret

000000c0 <light2>:
void light2()
{
	PORTB=0b00110011;
  c0:	83 e3       	ldi	r24, 0x33	; 51
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	93 ec       	ldi	r25, 0xC3	; 195
  c8:	a9 e0       	ldi	r26, 0x09	; 9
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	a0 40       	sbci	r26, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <light2+0xa>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <light2+0x14>
  d4:	00 00       	nop
	_delay_ms(200);
	PORTB=0b11001100;
  d6:	8c ec       	ldi	r24, 0xCC	; 204
  d8:	88 bb       	out	0x18, r24	; 24
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	93 ec       	ldi	r25, 0xC3	; 195
  de:	a9 e0       	ldi	r26, 0x09	; 9
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	a0 40       	sbci	r26, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <light2+0x20>
  e8:	00 c0       	rjmp	.+0      	; 0xea <light2+0x2a>
  ea:	00 00       	nop
	_delay_ms(200);
}
  ec:	08 95       	ret

000000ee <light3>:
void light3()
{
	PORTB=0b00001111;
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	a9 e0       	ldi	r26, 0x09	; 9
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	a0 40       	sbci	r26, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <light3+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <light3+0x14>
 102:	00 00       	nop
	_delay_ms(200);
	PORTB=0b11110000;
 104:	80 ef       	ldi	r24, 0xF0	; 240
 106:	88 bb       	out	0x18, r24	; 24
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	93 ec       	ldi	r25, 0xC3	; 195
 10c:	a9 e0       	ldi	r26, 0x09	; 9
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	a0 40       	sbci	r26, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <light3+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <light3+0x2a>
 118:	00 00       	nop
	_delay_ms(200);
	
}
 11a:	08 95       	ret

0000011c <main>:

int main(void)
{
	DDRB=~0;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
	DDRD=0;
 120:	11 ba       	out	0x11, r1	; 17
	GICR|=(1<<INT1);
 122:	8b b7       	in	r24, 0x3b	; 59
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC00)|(1<<ISC01);
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	85 bf       	out	0x35, r24	; 53
	
		
    while(1)
    {
		light1();
 12e:	0e 94 49 00 	call	0x92	; 0x92 <light1>
		sei();
 132:	78 94       	sei
		light2();
 134:	0e 94 60 00 	call	0xc0	; 0xc0 <light2>
		cli();		
 138:	f8 94       	cli
		sei();
 13a:	78 94       	sei
		light3();
 13c:	0e 94 77 00 	call	0xee	; 0xee <light3>
		cli();
 140:	f8 94       	cli
 142:	f5 cf       	rjmp	.-22     	; 0x12e <main+0x12>

00000144 <__vector_2>:
        //TODO:: Please write your application code 
    }
}
ISR(INT1_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
	
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
