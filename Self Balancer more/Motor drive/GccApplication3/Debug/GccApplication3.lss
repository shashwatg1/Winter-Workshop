
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000237  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ee  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e5  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000051  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define EN_2 5
#include <avr/io.h>
#include <util/delay.h>
int main()
{ int i;
	DDRD=(1<<EN_1)|(1<<EN_2);
  6c:	80 e3       	ldi	r24, 0x30	; 48
  6e:	81 bb       	out	0x11, r24	; 17
	DDRC=255;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	PORTD=0b00000000;
  74:	12 ba       	out	0x12, r1	; 18
	TCCR1A|=(1<<WGM10)|(0<<WGM11);
  76:	8f b5       	in	r24, 0x2f	; 47
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A|=(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0);
  7c:	8f b5       	in	r24, 0x2f	; 47
  7e:	80 6a       	ori	r24, 0xA0	; 160
  80:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(0<<CS12)|(1<<CS11)|(1<<CS10);
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	83 60       	ori	r24, 0x03	; 3
  86:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(0<<WGM13)|(1<<WGM12);
  88:	8e b5       	in	r24, 0x2e	; 46
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	8e bd       	out	0x2e, r24	; 46
	while (1)
	{
		PORTC=(1<<0)|(1<<3);
  8e:	59 e0       	ldi	r21, 0x09	; 9
		for(i=0;i<255;i++)
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
		{
			OCR1A=OCR1B=i;
			_delay_ms(100);
		}
		
		PORTC=(1<<1)|(1<<2);
  94:	46 e0       	ldi	r20, 0x06	; 6
	TCCR1A|=(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0);
	TCCR1B|=(0<<CS12)|(1<<CS11)|(1<<CS10);
	TCCR1B|=(0<<WGM13)|(1<<WGM12);
	while (1)
	{
		PORTC=(1<<0)|(1<<3);
  96:	55 bb       	out	0x15, r21	; 21
		for(i=0;i<255;i++)
  98:	c9 01       	movw	r24, r18
		{OCR1A=OCR1B=i;
  9a:	99 bd       	out	0x29, r25	; 41
  9c:	88 bd       	out	0x28, r24	; 40
  9e:	9b bd       	out	0x2b, r25	; 43
  a0:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	6f ef       	ldi	r22, 0xFF	; 255
  a4:	71 ee       	ldi	r23, 0xE1	; 225
  a6:	e4 e0       	ldi	r30, 0x04	; 4
  a8:	61 50       	subi	r22, 0x01	; 1
  aa:	70 40       	sbci	r23, 0x00	; 0
  ac:	e0 40       	sbci	r30, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
	TCCR1B|=(0<<CS12)|(1<<CS11)|(1<<CS10);
	TCCR1B|=(0<<WGM13)|(1<<WGM12);
	while (1)
	{
		PORTC=(1<<0)|(1<<3);
		for(i=0;i<255;i++)
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	91 05       	cpc	r25, r1
  ba:	79 f7       	brne	.-34     	; 0x9a <main+0x2e>
			_delay_ms(100);
		}
		
		for(i=255;i>=0;i--)
		{
			OCR1A=OCR1B=i;
  bc:	99 bd       	out	0x29, r25	; 41
  be:	88 bd       	out	0x28, r24	; 40
  c0:	9b bd       	out	0x2b, r25	; 43
  c2:	8a bd       	out	0x2a, r24	; 42
  c4:	6f ef       	ldi	r22, 0xFF	; 255
  c6:	71 ee       	ldi	r23, 0xE1	; 225
  c8:	e4 e0       	ldi	r30, 0x04	; 4
  ca:	61 50       	subi	r22, 0x01	; 1
  cc:	70 40       	sbci	r23, 0x00	; 0
  ce:	e0 40       	sbci	r30, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
		for(i=0;i<255;i++)
		{OCR1A=OCR1B=i;
			_delay_ms(100);
		}
		
		for(i=255;i>=0;i--)
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	88 f7       	brcc	.-30     	; 0xbc <main+0x50>
		{
			OCR1A=OCR1B=i;
			_delay_ms(100);
		}
		
		PORTC=(1<<1)|(1<<2);
  da:	45 bb       	out	0x15, r20	; 21
		
		for(i=0;i<255;i++)
  dc:	c9 01       	movw	r24, r18
		{OCR1A=OCR1B=i;
  de:	99 bd       	out	0x29, r25	; 41
  e0:	88 bd       	out	0x28, r24	; 40
  e2:	9b bd       	out	0x2b, r25	; 43
  e4:	8a bd       	out	0x2a, r24	; 42
  e6:	7f ef       	ldi	r23, 0xFF	; 255
  e8:	e1 ee       	ldi	r30, 0xE1	; 225
  ea:	64 e0       	ldi	r22, 0x04	; 4
  ec:	71 50       	subi	r23, 0x01	; 1
  ee:	e0 40       	sbci	r30, 0x00	; 0
  f0:	60 40       	sbci	r22, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x80>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x8a>
  f6:	00 00       	nop
			_delay_ms(100);
		}
		
		PORTC=(1<<1)|(1<<2);
		
		for(i=0;i<255;i++)
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	91 05       	cpc	r25, r1
  fe:	79 f7       	brne	.-34     	; 0xde <main+0x72>
			_delay_ms(100);
		}
		
		for(i=255;i>=0;i--)
		{
			OCR1A=OCR1B=i;
 100:	99 bd       	out	0x29, r25	; 41
 102:	88 bd       	out	0x28, r24	; 40
 104:	9b bd       	out	0x2b, r25	; 43
 106:	8a bd       	out	0x2a, r24	; 42
 108:	7f ef       	ldi	r23, 0xFF	; 255
 10a:	e1 ee       	ldi	r30, 0xE1	; 225
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	71 50       	subi	r23, 0x01	; 1
 110:	e0 40       	sbci	r30, 0x00	; 0
 112:	60 40       	sbci	r22, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0xa2>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0xac>
 118:	00 00       	nop
		for(i=0;i<255;i++)
		{OCR1A=OCR1B=i;
			_delay_ms(100);
		}
		
		for(i=255;i>=0;i--)
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	88 f7       	brcc	.-30     	; 0x100 <main+0x94>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	91 ee       	ldi	r25, 0xE1	; 225
 122:	e4 e0       	ldi	r30, 0x04	; 4
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e0 40       	sbci	r30, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0xb8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0xc2>
 12e:	00 00       	nop
 130:	b2 cf       	rjmp	.-156    	; 0x96 <main+0x2a>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
