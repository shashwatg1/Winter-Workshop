
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000202  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000100  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ea  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000111  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000097  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
	int i,j;
	DDRB=255;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00000000;
  70:	18 ba       	out	0x18, r1	; 24
	while(1)
	{
		for(i=0;i<8;i++)
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB |=(1<<i);
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
	int i,j;
	DDRB=255;
	PORTB=0b00000000;
	while(1)
	{
		for(i=0;i<8;i++)
  7a:	e7 e0       	ldi	r30, 0x07	; 7
  7c:	f0 e0       	ldi	r31, 0x00	; 0
		{
			PORTB |=(1<<i);
			_delay_ms(1000);
		}
		i=7;
		for(i=7;i>=0;i--)
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	14 c0       	rjmp	.+40     	; 0xac <main+0x40>
	PORTB=0b00000000;
	while(1)
	{
		for(i=0;i<8;i++)
		{
			PORTB |=(1<<i);
  84:	68 b3       	in	r22, 0x18	; 24
  86:	a9 01       	movw	r20, r18
  88:	08 2e       	mov	r0, r24
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x24>
  8c:	44 0f       	add	r20, r20
  8e:	55 1f       	adc	r21, r21
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <main+0x20>
  94:	46 2b       	or	r20, r22
  96:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	4f ef       	ldi	r20, 0xFF	; 255
  9a:	53 ed       	ldi	r21, 0xD3	; 211
  9c:	60 e3       	ldi	r22, 0x30	; 48
  9e:	41 50       	subi	r20, 0x01	; 1
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
	int i,j;
	DDRB=255;
	PORTB=0b00000000;
	while(1)
	{
		for(i=0;i<8;i++)
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	91 05       	cpc	r25, r1
  b0:	4c f3       	brlt	.-46     	; 0x84 <main+0x18>
  b2:	cf 01       	movw	r24, r30
			_delay_ms(1000);
		}
		i=7;
		for(i=7;i>=0;i--)
		{
			PORTB ^=(1<<i);
  b4:	68 b3       	in	r22, 0x18	; 24
  b6:	a9 01       	movw	r20, r18
  b8:	08 2e       	mov	r0, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x50>
  c4:	46 27       	eor	r20, r22
  c6:	48 bb       	out	0x18, r20	; 24
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	53 ed       	ldi	r21, 0xD3	; 211
  cc:	60 e3       	ldi	r22, 0x30	; 48
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	60 40       	sbci	r22, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
		{
			PORTB |=(1<<i);
			_delay_ms(1000);
		}
		i=7;
		for(i=7;i>=0;i--)
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	58 f7       	brcc	.-42     	; 0xb4 <main+0x48>
  de:	cd 01       	movw	r24, r26
			_delay_ms(1000);
		}
		i=0;j=7;
		for(i=0,j=7;i<4;i++,j--)
		{
			PORTB |=(1<<i);
  e0:	68 b3       	in	r22, 0x18	; 24
  e2:	a9 01       	movw	r20, r18
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x80>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x7c>
  f0:	46 2b       	or	r20, r22
  f2:	48 bb       	out	0x18, r20	; 24
  f4:	5f ef       	ldi	r21, 0xFF	; 255
  f6:	63 ed       	ldi	r22, 0xD3	; 211
  f8:	40 e3       	ldi	r20, 0x30	; 48
  fa:	51 50       	subi	r21, 0x01	; 1
  fc:	60 40       	sbci	r22, 0x00	; 0
  fe:	40 40       	sbci	r20, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x8e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x98>
 104:	00 00       	nop
			_delay_ms(1000);
			PORTB |=(1<<j);
 106:	c8 b3       	in	r28, 0x18	; 24
#define F_CPU 16000000UL
#include<avr/io.h>
#include<util/delay.h>
int main()
 108:	bf 01       	movw	r22, r30
 10a:	68 1b       	sub	r22, r24
 10c:	79 0b       	sbc	r23, r25
		i=0;j=7;
		for(i=0,j=7;i<4;i++,j--)
		{
			PORTB |=(1<<i);
			_delay_ms(1000);
			PORTB |=(1<<j);
 10e:	a9 01       	movw	r20, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <main+0xaa>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <main+0xa6>
 11a:	4c 2b       	or	r20, r28
 11c:	48 bb       	out	0x18, r20	; 24
 11e:	5f ef       	ldi	r21, 0xFF	; 255
 120:	63 ed       	ldi	r22, 0xD3	; 211
 122:	40 e3       	ldi	r20, 0x30	; 48
 124:	51 50       	subi	r21, 0x01	; 1
 126:	60 40       	sbci	r22, 0x00	; 0
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0xb8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0xc2>
 12e:	00 00       	nop
		{
			PORTB ^=(1<<i);
			_delay_ms(1000);
		}
		i=0;j=7;
		for(i=0,j=7;i<4;i++,j--)
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	91 05       	cpc	r25, r1
 136:	a1 f6       	brne	.-88     	; 0xe0 <main+0x74>
	int i,j;
	DDRB=255;
	PORTB=0b00000000;
	while(1)
	{
		for(i=0;i<8;i++)
 138:	cd 01       	movw	r24, r26
 13a:	b8 cf       	rjmp	.-144    	; 0xac <main+0x40>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
